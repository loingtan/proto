// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: coupon/v1/coupon.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _coupon_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Coupon with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Coupon) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Coupon with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CouponMultiError, or nil if none found.
func (m *Coupon) ValidateAll() error {
	return m.validate(true)
}

func (m *Coupon) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = CouponValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCode()); l < 3 || l > 50 {
		err := CouponValidationError{
			field:  "Code",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Coupon_Code_Pattern.MatchString(m.GetCode()) {
		err := CouponValidationError{
			field:  "Code",
			reason: "value does not match regex pattern \"^[A-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 100 {
		err := CouponValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 500 {
		err := CouponValidationError{
			field:  "Description",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMinSpend() < 0 {
		err := CouponValidationError{
			field:  "MinSpend",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FirstTimeUserOnly

	if m.GetUsageLimitPerUser() < 0 {
		err := CouponValidationError{
			field:  "UsageLimitPerUser",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUsageLimitGlobal() < 0 {
		err := CouponValidationError{
			field:  "UsageLimitGlobal",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUsageGlobal() < 0 {
		err := CouponValidationError{
			field:  "UsageGlobal",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReservedGlobal() < 0 {
		err := CouponValidationError{
			field:  "ReservedGlobal",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Coupon_DiscountType_InLookup[m.GetDiscountType()]; !ok {
		err := CouponValidationError{
			field:  "DiscountType",
			reason: "value must be in list [PERCENT FIXED FIXED_PRICE]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Coupon_UsageType_InLookup[m.GetUsageType()]; !ok {
		err := CouponValidationError{
			field:  "UsageType",
			reason: "value must be in list [MANUAL AUTO]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDiscountVal() <= 0 {
		err := CouponValidationError{
			field:  "DiscountVal",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxDiscount() < 0 {
		err := CouponValidationError{
			field:  "MaxDiscount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStartTime() == nil {
		err := CouponValidationError{
			field:  "StartTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEndTime() == nil {
		err := CouponValidationError{
			field:  "EndTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CouponValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CouponValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CouponMultiError(errors)
	}

	return nil
}

func (m *Coupon) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CouponMultiError is an error wrapping multiple validation errors returned by
// Coupon.ValidateAll() if the designated constraints aren't met.
type CouponMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponMultiError) AllErrors() []error { return m }

// CouponValidationError is the validation error returned by Coupon.Validate if
// the designated constraints aren't met.
type CouponValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponValidationError) ErrorName() string { return "CouponValidationError" }

// Error satisfies the builtin error interface
func (e CouponValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoupon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponValidationError{}

var _Coupon_Code_Pattern = regexp.MustCompile("^[A-Z0-9_-]+$")

var _Coupon_DiscountType_InLookup = map[string]struct{}{
	"PERCENT":     {},
	"FIXED":       {},
	"FIXED_PRICE": {},
}

var _Coupon_UsageType_InLookup = map[string]struct{}{
	"MANUAL": {},
	"AUTO":   {},
}

// Validate checks the field values on CreateCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCouponRequestMultiError, or nil if none found.
func (m *CreateCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCode()); l < 3 || l > 50 {
		err := CreateCouponRequestValidationError{
			field:  "Code",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateCouponRequest_Code_Pattern.MatchString(m.GetCode()) {
		err := CreateCouponRequestValidationError{
			field:  "Code",
			reason: "value does not match regex pattern \"^[A-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 100 {
		err := CreateCouponRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 500 {
		err := CreateCouponRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMinSpend() < 0 {
		err := CreateCouponRequestValidationError{
			field:  "MinSpend",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FirstTimeUserOnly

	if m.GetUsageLimitPerUser() < 0 {
		err := CreateCouponRequestValidationError{
			field:  "UsageLimitPerUser",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUsageLimitGlobal() < 0 {
		err := CreateCouponRequestValidationError{
			field:  "UsageLimitGlobal",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUsageGlobal() < 0 {
		err := CreateCouponRequestValidationError{
			field:  "UsageGlobal",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReservedGlobal() < 0 {
		err := CreateCouponRequestValidationError{
			field:  "ReservedGlobal",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateCouponRequest_DiscountType_InLookup[m.GetDiscountType()]; !ok {
		err := CreateCouponRequestValidationError{
			field:  "DiscountType",
			reason: "value must be in list [PERCENT FIXED FIXED_PRICE]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateCouponRequest_UsageType_InLookup[m.GetUsageType()]; !ok {
		err := CreateCouponRequestValidationError{
			field:  "UsageType",
			reason: "value must be in list [MANUAL AUTO]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDiscountVal() <= 0 {
		err := CreateCouponRequestValidationError{
			field:  "DiscountVal",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxDiscount() < 0 {
		err := CreateCouponRequestValidationError{
			field:  "MaxDiscount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStartTime() == nil {
		err := CreateCouponRequestValidationError{
			field:  "StartTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEndTime() == nil {
		err := CreateCouponRequestValidationError{
			field:  "EndTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCouponRequestMultiError(errors)
	}

	return nil
}

// CreateCouponRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCouponRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCouponRequestMultiError) AllErrors() []error { return m }

// CreateCouponRequestValidationError is the validation error returned by
// CreateCouponRequest.Validate if the designated constraints aren't met.
type CreateCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCouponRequestValidationError) ErrorName() string {
	return "CreateCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCouponRequestValidationError{}

var _CreateCouponRequest_Code_Pattern = regexp.MustCompile("^[A-Z0-9_-]+$")

var _CreateCouponRequest_DiscountType_InLookup = map[string]struct{}{
	"PERCENT":     {},
	"FIXED":       {},
	"FIXED_PRICE": {},
}

var _CreateCouponRequest_UsageType_InLookup = map[string]struct{}{
	"MANUAL": {},
	"AUTO":   {},
}

// Validate checks the field values on CreateCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCouponResponseMultiError, or nil if none found.
func (m *CreateCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCoupon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCouponResponseValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCouponResponseValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCoupon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCouponResponseValidationError{
				field:  "Coupon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	if len(errors) > 0 {
		return CreateCouponResponseMultiError(errors)
	}

	return nil
}

// CreateCouponResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCouponResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCouponResponseMultiError) AllErrors() []error { return m }

// CreateCouponResponseValidationError is the validation error returned by
// CreateCouponResponse.Validate if the designated constraints aren't met.
type CreateCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCouponResponseValidationError) ErrorName() string {
	return "CreateCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCouponResponseValidationError{}

// Validate checks the field values on UpdateCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCouponRequestMultiError, or nil if none found.
func (m *UpdateCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateCouponRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 100 {
		err := UpdateCouponRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 500 {
		err := UpdateCouponRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMinSpend() < 0 {
		err := UpdateCouponRequestValidationError{
			field:  "MinSpend",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FirstTimeUserOnly

	if m.GetUsageLimitPerUser() < 0 {
		err := UpdateCouponRequestValidationError{
			field:  "UsageLimitPerUser",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUsageLimitGlobal() < 0 {
		err := UpdateCouponRequestValidationError{
			field:  "UsageLimitGlobal",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUsageGlobal() < 0 {
		err := UpdateCouponRequestValidationError{
			field:  "UsageGlobal",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetReservedGlobal() < 0 {
		err := UpdateCouponRequestValidationError{
			field:  "ReservedGlobal",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateCouponRequest_DiscountType_InLookup[m.GetDiscountType()]; !ok {
		err := UpdateCouponRequestValidationError{
			field:  "DiscountType",
			reason: "value must be in list [PERCENT FIXED FIXED_PRICE]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateCouponRequest_UsageType_InLookup[m.GetUsageType()]; !ok {
		err := UpdateCouponRequestValidationError{
			field:  "UsageType",
			reason: "value must be in list [MANUAL AUTO]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDiscountVal() <= 0 {
		err := UpdateCouponRequestValidationError{
			field:  "DiscountVal",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxDiscount() < 0 {
		err := UpdateCouponRequestValidationError{
			field:  "MaxDiscount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStartTime() == nil {
		err := UpdateCouponRequestValidationError{
			field:  "StartTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEndTime() == nil {
		err := UpdateCouponRequestValidationError{
			field:  "EndTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateCouponRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateCouponRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateCouponRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCouponRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCouponRequestMultiError) AllErrors() []error { return m }

// UpdateCouponRequestValidationError is the validation error returned by
// UpdateCouponRequest.Validate if the designated constraints aren't met.
type UpdateCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCouponRequestValidationError) ErrorName() string {
	return "UpdateCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCouponRequestValidationError{}

var _UpdateCouponRequest_DiscountType_InLookup = map[string]struct{}{
	"PERCENT":     {},
	"FIXED":       {},
	"FIXED_PRICE": {},
}

var _UpdateCouponRequest_UsageType_InLookup = map[string]struct{}{
	"MANUAL": {},
	"AUTO":   {},
}

// Validate checks the field values on UpdateCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCouponResponseMultiError, or nil if none found.
func (m *UpdateCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCoupon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCouponResponseValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCouponResponseValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCoupon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCouponResponseValidationError{
				field:  "Coupon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	if len(errors) > 0 {
		return UpdateCouponResponseMultiError(errors)
	}

	return nil
}

// UpdateCouponResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCouponResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCouponResponseMultiError) AllErrors() []error { return m }

// UpdateCouponResponseValidationError is the validation error returned by
// UpdateCouponResponse.Validate if the designated constraints aren't met.
type UpdateCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCouponResponseValidationError) ErrorName() string {
	return "UpdateCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCouponResponseValidationError{}

// Validate checks the field values on DeleteCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCouponRequestMultiError, or nil if none found.
func (m *DeleteCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteCouponRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCouponRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteCouponRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteCouponRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCouponRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCouponRequestMultiError) AllErrors() []error { return m }

// DeleteCouponRequestValidationError is the validation error returned by
// DeleteCouponRequest.Validate if the designated constraints aren't met.
type DeleteCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCouponRequestValidationError) ErrorName() string {
	return "DeleteCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCouponRequestValidationError{}

// Validate checks the field values on DeleteCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCouponResponseMultiError, or nil if none found.
func (m *DeleteCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Error

	if len(errors) > 0 {
		return DeleteCouponResponseMultiError(errors)
	}

	return nil
}

// DeleteCouponResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCouponResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCouponResponseMultiError) AllErrors() []error { return m }

// DeleteCouponResponseValidationError is the validation error returned by
// DeleteCouponResponse.Validate if the designated constraints aren't met.
type DeleteCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCouponResponseValidationError) ErrorName() string {
	return "DeleteCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCouponResponseValidationError{}

// Validate checks the field values on ListCouponsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCouponsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCouponsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCouponsRequestMultiError, or nil if none found.
func (m *ListCouponsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCouponsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetPage(); val < 1 || val > 1000 {
		err := ListCouponsRequestValidationError{
			field:  "Page",
			reason: "value must be inside range [1, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := ListCouponsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFilter()) > 100 {
		err := ListCouponsRequestValidationError{
			field:  "Filter",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListCouponsRequestMultiError(errors)
	}

	return nil
}

// ListCouponsRequestMultiError is an error wrapping multiple validation errors
// returned by ListCouponsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCouponsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCouponsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCouponsRequestMultiError) AllErrors() []error { return m }

// ListCouponsRequestValidationError is the validation error returned by
// ListCouponsRequest.Validate if the designated constraints aren't met.
type ListCouponsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCouponsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCouponsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCouponsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCouponsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCouponsRequestValidationError) ErrorName() string {
	return "ListCouponsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCouponsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCouponsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCouponsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCouponsRequestValidationError{}

// Validate checks the field values on ListCouponsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCouponsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCouponsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCouponsResponseMultiError, or nil if none found.
func (m *ListCouponsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCouponsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoupons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCouponsResponseValidationError{
						field:  fmt.Sprintf("Coupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCouponsResponseValidationError{
						field:  fmt.Sprintf("Coupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCouponsResponseValidationError{
					field:  fmt.Sprintf("Coupons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Error

	if len(errors) > 0 {
		return ListCouponsResponseMultiError(errors)
	}

	return nil
}

// ListCouponsResponseMultiError is an error wrapping multiple validation
// errors returned by ListCouponsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCouponsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCouponsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCouponsResponseMultiError) AllErrors() []error { return m }

// ListCouponsResponseValidationError is the validation error returned by
// ListCouponsResponse.Validate if the designated constraints aren't met.
type ListCouponsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCouponsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCouponsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCouponsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCouponsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCouponsResponseValidationError) ErrorName() string {
	return "ListCouponsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCouponsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCouponsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCouponsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCouponsResponseValidationError{}

// Validate checks the field values on GetCouponRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouponRequestMultiError, or nil if none found.
func (m *GetCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Identifier.(type) {
	case *GetCouponRequest_Id:
		if v == nil {
			err := GetCouponRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateUuid(m.GetId()); err != nil {
			err = GetCouponRequestValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetCouponRequest_Code:
		if v == nil {
			err := GetCouponRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetCode()); l < 3 || l > 50 {
			err := GetCouponRequestValidationError{
				field:  "Code",
				reason: "value length must be between 3 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_GetCouponRequest_Code_Pattern.MatchString(m.GetCode()) {
			err := GetCouponRequestValidationError{
				field:  "Code",
				reason: "value does not match regex pattern \"^[A-Z0-9_-]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetCouponRequestMultiError(errors)
	}

	return nil
}

func (m *GetCouponRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCouponRequestMultiError is an error wrapping multiple validation errors
// returned by GetCouponRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouponRequestMultiError) AllErrors() []error { return m }

// GetCouponRequestValidationError is the validation error returned by
// GetCouponRequest.Validate if the designated constraints aren't met.
type GetCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouponRequestValidationError) ErrorName() string { return "GetCouponRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouponRequestValidationError{}

var _GetCouponRequest_Code_Pattern = regexp.MustCompile("^[A-Z0-9_-]+$")

// Validate checks the field values on GetCouponResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouponResponseMultiError, or nil if none found.
func (m *GetCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCoupon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCouponResponseValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCouponResponseValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCoupon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCouponResponseValidationError{
				field:  "Coupon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	if len(errors) > 0 {
		return GetCouponResponseMultiError(errors)
	}

	return nil
}

// GetCouponResponseMultiError is an error wrapping multiple validation errors
// returned by GetCouponResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouponResponseMultiError) AllErrors() []error { return m }

// GetCouponResponseValidationError is the validation error returned by
// GetCouponResponse.Validate if the designated constraints aren't met.
type GetCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouponResponseValidationError) ErrorName() string {
	return "GetCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouponResponseValidationError{}

// Validate checks the field values on ReserveCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveCouponRequestMultiError, or nil if none found.
func (m *ReserveCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ReserveCouponRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetCouponId()); err != nil {
		err = ReserveCouponRequestValidationError{
			field:  "CouponId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCartTotal() <= 0 {
		err := ReserveCouponRequestValidationError{
			field:  "CartTotal",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReserveCouponRequestMultiError(errors)
	}

	return nil
}

func (m *ReserveCouponRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ReserveCouponRequestMultiError is an error wrapping multiple validation
// errors returned by ReserveCouponRequest.ValidateAll() if the designated
// constraints aren't met.
type ReserveCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveCouponRequestMultiError) AllErrors() []error { return m }

// ReserveCouponRequestValidationError is the validation error returned by
// ReserveCouponRequest.Validate if the designated constraints aren't met.
type ReserveCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveCouponRequestValidationError) ErrorName() string {
	return "ReserveCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveCouponRequestValidationError{}

// Validate checks the field values on ReserveCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveCouponResponseMultiError, or nil if none found.
func (m *ReserveCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	// no validation rules for Discount

	// no validation rules for FinalAmount

	// no validation rules for ReservationId

	// no validation rules for CouponId

	// no validation rules for Reason

	// no validation rules for TtlSeconds

	if len(errors) > 0 {
		return ReserveCouponResponseMultiError(errors)
	}

	return nil
}

// ReserveCouponResponseMultiError is an error wrapping multiple validation
// errors returned by ReserveCouponResponse.ValidateAll() if the designated
// constraints aren't met.
type ReserveCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveCouponResponseMultiError) AllErrors() []error { return m }

// ReserveCouponResponseValidationError is the validation error returned by
// ReserveCouponResponse.Validate if the designated constraints aren't met.
type ReserveCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveCouponResponseValidationError) ErrorName() string {
	return "ReserveCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveCouponResponseValidationError{}

// Validate checks the field values on CalculateDiscountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateDiscountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateDiscountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalculateDiscountRequestMultiError, or nil if none found.
func (m *CalculateDiscountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateDiscountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCouponCode()); l < 3 || l > 50 {
		err := CalculateDiscountRequestValidationError{
			field:  "CouponCode",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CalculateDiscountRequest_CouponCode_Pattern.MatchString(m.GetCouponCode()) {
		err := CalculateDiscountRequestValidationError{
			field:  "CouponCode",
			reason: "value does not match regex pattern \"^[A-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := CalculateDiscountRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = CalculateDiscountRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrderTime() == nil {
		err := CalculateDiscountRequestValidationError{
			field:  "OrderTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CalculateDiscountRequestMultiError(errors)
	}

	return nil
}

func (m *CalculateDiscountRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CalculateDiscountRequestMultiError is an error wrapping multiple validation
// errors returned by CalculateDiscountRequest.ValidateAll() if the designated
// constraints aren't met.
type CalculateDiscountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateDiscountRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateDiscountRequestMultiError) AllErrors() []error { return m }

// CalculateDiscountRequestValidationError is the validation error returned by
// CalculateDiscountRequest.Validate if the designated constraints aren't met.
type CalculateDiscountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateDiscountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateDiscountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateDiscountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateDiscountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateDiscountRequestValidationError) ErrorName() string {
	return "CalculateDiscountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateDiscountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateDiscountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateDiscountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateDiscountRequestValidationError{}

var _CalculateDiscountRequest_CouponCode_Pattern = regexp.MustCompile("^[A-Z0-9_-]+$")

// Validate checks the field values on CalculateDiscountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateDiscountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateDiscountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalculateDiscountResponseMultiError, or nil if none found.
func (m *CalculateDiscountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateDiscountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscountAmount

	// no validation rules for FinalAmount

	// no validation rules for CouponId

	// no validation rules for Error

	if len(errors) > 0 {
		return CalculateDiscountResponseMultiError(errors)
	}

	return nil
}

// CalculateDiscountResponseMultiError is an error wrapping multiple validation
// errors returned by CalculateDiscountResponse.ValidateAll() if the
// designated constraints aren't met.
type CalculateDiscountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateDiscountResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateDiscountResponseMultiError) AllErrors() []error { return m }

// CalculateDiscountResponseValidationError is the validation error returned by
// CalculateDiscountResponse.Validate if the designated constraints aren't met.
type CalculateDiscountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateDiscountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateDiscountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateDiscountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateDiscountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateDiscountResponseValidationError) ErrorName() string {
	return "CalculateDiscountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateDiscountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateDiscountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateDiscountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateDiscountResponseValidationError{}
