// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: coupon/v1/coupon.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _coupon_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Coupon with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Coupon) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Coupon with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CouponMultiError, or nil if none found.
func (m *Coupon) ValidateAll() error {
	return m.validate(true)
}

func (m *Coupon) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = CouponValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCode()); l < 3 || l > 50 {
		err := CouponValidationError{
			field:  "Code",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Coupon_Code_Pattern.MatchString(m.GetCode()) {
		err := CouponValidationError{
			field:  "Code",
			reason: "value does not match regex pattern \"^[A-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 100 {
		err := CouponValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 500 {
		err := CouponValidationError{
			field:  "Description",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMinSpend() < 0 {
		err := CouponValidationError{
			field:  "MinSpend",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FirstTimeUserOnly

	if m.GetUsageLimitPerUser() < 0 {
		err := CouponValidationError{
			field:  "UsageLimitPerUser",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUsageLimitGlobal() < 0 {
		err := CouponValidationError{
			field:  "UsageLimitGlobal",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUsageGlobal() < 0 {
		err := CouponValidationError{
			field:  "UsageGlobal",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Coupon_DiscountType_InLookup[m.GetDiscountType()]; !ok {
		err := CouponValidationError{
			field:  "DiscountType",
			reason: "value must be in list [PERCENT FIXED FIXED_PRICE]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Coupon_UsageType_InLookup[m.GetUsageType()]; !ok {
		err := CouponValidationError{
			field:  "UsageType",
			reason: "value must be in list [MANUAL AUTO]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDiscountVal() <= 0 {
		err := CouponValidationError{
			field:  "DiscountVal",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxDiscount() < 0 {
		err := CouponValidationError{
			field:  "MaxDiscount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStartTime() == nil {
		err := CouponValidationError{
			field:  "StartTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEndTime() == nil {
		err := CouponValidationError{
			field:  "EndTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CouponValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CouponValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CouponValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for MerchantId

	if len(errors) > 0 {
		return CouponMultiError(errors)
	}

	return nil
}

func (m *Coupon) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CouponMultiError is an error wrapping multiple validation errors returned by
// Coupon.ValidateAll() if the designated constraints aren't met.
type CouponMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CouponMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CouponMultiError) AllErrors() []error { return m }

// CouponValidationError is the validation error returned by Coupon.Validate if
// the designated constraints aren't met.
type CouponValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CouponValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CouponValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CouponValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CouponValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CouponValidationError) ErrorName() string { return "CouponValidationError" }

// Error satisfies the builtin error interface
func (e CouponValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCoupon.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CouponValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CouponValidationError{}

var _Coupon_Code_Pattern = regexp.MustCompile("^[A-Z0-9_-]+$")

var _Coupon_DiscountType_InLookup = map[string]struct{}{
	"PERCENT":     {},
	"FIXED":       {},
	"FIXED_PRICE": {},
}

var _Coupon_UsageType_InLookup = map[string]struct{}{
	"MANUAL": {},
	"AUTO":   {},
}

// Validate checks the field values on CreateCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCouponRequestMultiError, or nil if none found.
func (m *CreateCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCode()); l < 3 || l > 50 {
		err := CreateCouponRequestValidationError{
			field:  "Code",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateCouponRequest_Code_Pattern.MatchString(m.GetCode()) {
		err := CreateCouponRequestValidationError{
			field:  "Code",
			reason: "value does not match regex pattern \"^[A-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 100 {
		err := CreateCouponRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 500 {
		err := CreateCouponRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMinSpend() < 0 {
		err := CreateCouponRequestValidationError{
			field:  "MinSpend",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FirstTimeUserOnly

	if m.GetUsageLimitPerUser() < 0 {
		err := CreateCouponRequestValidationError{
			field:  "UsageLimitPerUser",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUsageLimitGlobal() < 0 {
		err := CreateCouponRequestValidationError{
			field:  "UsageLimitGlobal",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUsageGlobal() < 0 {
		err := CreateCouponRequestValidationError{
			field:  "UsageGlobal",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateCouponRequest_DiscountType_InLookup[m.GetDiscountType()]; !ok {
		err := CreateCouponRequestValidationError{
			field:  "DiscountType",
			reason: "value must be in list [PERCENT FIXED FIXED_PRICE]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateCouponRequest_UsageType_InLookup[m.GetUsageType()]; !ok {
		err := CreateCouponRequestValidationError{
			field:  "UsageType",
			reason: "value must be in list [MANUAL AUTO]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDiscountVal() <= 0 {
		err := CreateCouponRequestValidationError{
			field:  "DiscountVal",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxDiscount() < 0 {
		err := CreateCouponRequestValidationError{
			field:  "MaxDiscount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStartTime() == nil {
		err := CreateCouponRequestValidationError{
			field:  "StartTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEndTime() == nil {
		err := CreateCouponRequestValidationError{
			field:  "EndTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MerchantId

	// no validation rules for AwardUserId

	if len(errors) > 0 {
		return CreateCouponRequestMultiError(errors)
	}

	return nil
}

// CreateCouponRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCouponRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCouponRequestMultiError) AllErrors() []error { return m }

// CreateCouponRequestValidationError is the validation error returned by
// CreateCouponRequest.Validate if the designated constraints aren't met.
type CreateCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCouponRequestValidationError) ErrorName() string {
	return "CreateCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCouponRequestValidationError{}

var _CreateCouponRequest_Code_Pattern = regexp.MustCompile("^[A-Z0-9_-]+$")

var _CreateCouponRequest_DiscountType_InLookup = map[string]struct{}{
	"PERCENT":     {},
	"FIXED":       {},
	"FIXED_PRICE": {},
}

var _CreateCouponRequest_UsageType_InLookup = map[string]struct{}{
	"MANUAL": {},
	"AUTO":   {},
}

// Validate checks the field values on CreateCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCouponResponseMultiError, or nil if none found.
func (m *CreateCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCoupon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCouponResponseValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCouponResponseValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCoupon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCouponResponseValidationError{
				field:  "Coupon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	if len(errors) > 0 {
		return CreateCouponResponseMultiError(errors)
	}

	return nil
}

// CreateCouponResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCouponResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCouponResponseMultiError) AllErrors() []error { return m }

// CreateCouponResponseValidationError is the validation error returned by
// CreateCouponResponse.Validate if the designated constraints aren't met.
type CreateCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCouponResponseValidationError) ErrorName() string {
	return "CreateCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCouponResponseValidationError{}

// Validate checks the field values on UpdateCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCouponRequestMultiError, or nil if none found.
func (m *UpdateCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateCouponRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 100 {
		err := UpdateCouponRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 500 {
		err := UpdateCouponRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMinSpend() < 0 {
		err := UpdateCouponRequestValidationError{
			field:  "MinSpend",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for FirstTimeUserOnly

	if m.GetUsageLimitPerUser() < 0 {
		err := UpdateCouponRequestValidationError{
			field:  "UsageLimitPerUser",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUsageLimitGlobal() < 0 {
		err := UpdateCouponRequestValidationError{
			field:  "UsageLimitGlobal",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUsageGlobal() < 0 {
		err := UpdateCouponRequestValidationError{
			field:  "UsageGlobal",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateCouponRequest_DiscountType_InLookup[m.GetDiscountType()]; !ok {
		err := UpdateCouponRequestValidationError{
			field:  "DiscountType",
			reason: "value must be in list [PERCENT FIXED FIXED_PRICE]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateCouponRequest_UsageType_InLookup[m.GetUsageType()]; !ok {
		err := UpdateCouponRequestValidationError{
			field:  "UsageType",
			reason: "value must be in list [MANUAL AUTO]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDiscountVal() <= 0 {
		err := UpdateCouponRequestValidationError{
			field:  "DiscountVal",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetMaxDiscount() < 0 {
		err := UpdateCouponRequestValidationError{
			field:  "MaxDiscount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStartTime() == nil {
		err := UpdateCouponRequestValidationError{
			field:  "StartTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEndTime() == nil {
		err := UpdateCouponRequestValidationError{
			field:  "EndTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MerchantId

	if len(errors) > 0 {
		return UpdateCouponRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateCouponRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateCouponRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateCouponRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCouponRequestMultiError) AllErrors() []error { return m }

// UpdateCouponRequestValidationError is the validation error returned by
// UpdateCouponRequest.Validate if the designated constraints aren't met.
type UpdateCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCouponRequestValidationError) ErrorName() string {
	return "UpdateCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCouponRequestValidationError{}

var _UpdateCouponRequest_DiscountType_InLookup = map[string]struct{}{
	"PERCENT":     {},
	"FIXED":       {},
	"FIXED_PRICE": {},
}

var _UpdateCouponRequest_UsageType_InLookup = map[string]struct{}{
	"MANUAL": {},
	"AUTO":   {},
}

// Validate checks the field values on UpdateCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateCouponResponseMultiError, or nil if none found.
func (m *UpdateCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCoupon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateCouponResponseValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateCouponResponseValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCoupon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateCouponResponseValidationError{
				field:  "Coupon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	if len(errors) > 0 {
		return UpdateCouponResponseMultiError(errors)
	}

	return nil
}

// UpdateCouponResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateCouponResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateCouponResponseMultiError) AllErrors() []error { return m }

// UpdateCouponResponseValidationError is the validation error returned by
// UpdateCouponResponse.Validate if the designated constraints aren't met.
type UpdateCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateCouponResponseValidationError) ErrorName() string {
	return "UpdateCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateCouponResponseValidationError{}

// Validate checks the field values on DeleteCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCouponRequestMultiError, or nil if none found.
func (m *DeleteCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteCouponRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteCouponRequestMultiError(errors)
	}

	return nil
}

func (m *DeleteCouponRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteCouponRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteCouponRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCouponRequestMultiError) AllErrors() []error { return m }

// DeleteCouponRequestValidationError is the validation error returned by
// DeleteCouponRequest.Validate if the designated constraints aren't met.
type DeleteCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCouponRequestValidationError) ErrorName() string {
	return "DeleteCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCouponRequestValidationError{}

// Validate checks the field values on DeleteCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteCouponResponseMultiError, or nil if none found.
func (m *DeleteCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	// no validation rules for Error

	if len(errors) > 0 {
		return DeleteCouponResponseMultiError(errors)
	}

	return nil
}

// DeleteCouponResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteCouponResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteCouponResponseMultiError) AllErrors() []error { return m }

// DeleteCouponResponseValidationError is the validation error returned by
// DeleteCouponResponse.Validate if the designated constraints aren't met.
type DeleteCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteCouponResponseValidationError) ErrorName() string {
	return "DeleteCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteCouponResponseValidationError{}

// Validate checks the field values on ListCouponsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCouponsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCouponsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCouponsRequestMultiError, or nil if none found.
func (m *ListCouponsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCouponsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetPage(); val < 1 || val > 1000 {
		err := ListCouponsRequestValidationError{
			field:  "Page",
			reason: "value must be inside range [1, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := ListCouponsRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFilter()) > 100 {
		err := ListCouponsRequestValidationError{
			field:  "Filter",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSearch()) > 100 {
		err := ListCouponsRequestValidationError{
			field:  "Search",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ListCouponsRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := ListCouponsRequestValidationError{
			field:  "Status",
			reason: "value must be in list [ACTIVE INACTIVE EXPIRED USED_UP ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ListCouponsRequest_DiscountType_InLookup[m.GetDiscountType()]; !ok {
		err := ListCouponsRequestValidationError{
			field:  "DiscountType",
			reason: "value must be in list [PERCENT FIXED FIXED_PRICE ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetDiscountTypes() {
		_, _ = idx, item

		if _, ok := _ListCouponsRequest_DiscountTypes_InLookup[item]; !ok {
			err := ListCouponsRequestValidationError{
				field:  fmt.Sprintf("DiscountTypes[%v]", idx),
				reason: "value must be in list [PERCENT FIXED FIXED_PRICE]",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if _, ok := _ListCouponsRequest_UsageType_InLookup[m.GetUsageType()]; !ok {
		err := ListCouponsRequestValidationError{
			field:  "UsageType",
			reason: "value must be in list [MANUAL AUTO ]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.FirstTimeUserOnly != nil {
		// no validation rules for FirstTimeUserOnly
	}

	if m.MinUsageGlobal != nil {

		if m.GetMinUsageGlobal() < 0 {
			err := ListCouponsRequestValidationError{
				field:  "MinUsageGlobal",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.MaxUsageGlobal != nil {

		if m.GetMaxUsageGlobal() < 0 {
			err := ListCouponsRequestValidationError{
				field:  "MaxUsageGlobal",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.MinUsageLimitPerUser != nil {

		if m.GetMinUsageLimitPerUser() < 0 {
			err := ListCouponsRequestValidationError{
				field:  "MinUsageLimitPerUser",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.MaxUsageLimitPerUser != nil {

		if m.GetMaxUsageLimitPerUser() < 0 {
			err := ListCouponsRequestValidationError{
				field:  "MaxUsageLimitPerUser",
				reason: "value must be greater than or equal to 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.StartDateFrom != nil {

		if utf8.RuneCountInString(m.GetStartDateFrom()) > 30 {
			err := ListCouponsRequestValidationError{
				field:  "StartDateFrom",
				reason: "value length must be at most 30 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.StartDateTo != nil {

		if utf8.RuneCountInString(m.GetStartDateTo()) > 30 {
			err := ListCouponsRequestValidationError{
				field:  "StartDateTo",
				reason: "value length must be at most 30 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.EndDateFrom != nil {

		if utf8.RuneCountInString(m.GetEndDateFrom()) > 30 {
			err := ListCouponsRequestValidationError{
				field:  "EndDateFrom",
				reason: "value length must be at most 30 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.EndDateTo != nil {

		if utf8.RuneCountInString(m.GetEndDateTo()) > 30 {
			err := ListCouponsRequestValidationError{
				field:  "EndDateTo",
				reason: "value length must be at most 30 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if m.MerchantId != nil {
		// no validation rules for MerchantId
	}

	if len(errors) > 0 {
		return ListCouponsRequestMultiError(errors)
	}

	return nil
}

// ListCouponsRequestMultiError is an error wrapping multiple validation errors
// returned by ListCouponsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListCouponsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCouponsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCouponsRequestMultiError) AllErrors() []error { return m }

// ListCouponsRequestValidationError is the validation error returned by
// ListCouponsRequest.Validate if the designated constraints aren't met.
type ListCouponsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCouponsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCouponsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCouponsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCouponsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCouponsRequestValidationError) ErrorName() string {
	return "ListCouponsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCouponsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCouponsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCouponsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCouponsRequestValidationError{}

var _ListCouponsRequest_Status_InLookup = map[string]struct{}{
	"ACTIVE":   {},
	"INACTIVE": {},
	"EXPIRED":  {},
	"USED_UP":  {},
	"":         {},
}

var _ListCouponsRequest_DiscountType_InLookup = map[string]struct{}{
	"PERCENT":     {},
	"FIXED":       {},
	"FIXED_PRICE": {},
	"":            {},
}

var _ListCouponsRequest_DiscountTypes_InLookup = map[string]struct{}{
	"PERCENT":     {},
	"FIXED":       {},
	"FIXED_PRICE": {},
}

var _ListCouponsRequest_UsageType_InLookup = map[string]struct{}{
	"MANUAL": {},
	"AUTO":   {},
	"":       {},
}

// Validate checks the field values on ListCouponsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCouponsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCouponsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCouponsResponseMultiError, or nil if none found.
func (m *ListCouponsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCouponsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoupons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCouponsResponseValidationError{
						field:  fmt.Sprintf("Coupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCouponsResponseValidationError{
						field:  fmt.Sprintf("Coupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCouponsResponseValidationError{
					field:  fmt.Sprintf("Coupons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Error

	if len(errors) > 0 {
		return ListCouponsResponseMultiError(errors)
	}

	return nil
}

// ListCouponsResponseMultiError is an error wrapping multiple validation
// errors returned by ListCouponsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListCouponsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCouponsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCouponsResponseMultiError) AllErrors() []error { return m }

// ListCouponsResponseValidationError is the validation error returned by
// ListCouponsResponse.Validate if the designated constraints aren't met.
type ListCouponsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCouponsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCouponsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCouponsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCouponsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCouponsResponseValidationError) ErrorName() string {
	return "ListCouponsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCouponsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCouponsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCouponsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCouponsResponseValidationError{}

// Validate checks the field values on GetCouponRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouponRequestMultiError, or nil if none found.
func (m *GetCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Identifier.(type) {
	case *GetCouponRequest_Id:
		if v == nil {
			err := GetCouponRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateUuid(m.GetId()); err != nil {
			err = GetCouponRequestValidationError{
				field:  "Id",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *GetCouponRequest_Code:
		if v == nil {
			err := GetCouponRequestValidationError{
				field:  "Identifier",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetCode()); l < 3 || l > 50 {
			err := GetCouponRequestValidationError{
				field:  "Code",
				reason: "value length must be between 3 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_GetCouponRequest_Code_Pattern.MatchString(m.GetCode()) {
			err := GetCouponRequestValidationError{
				field:  "Code",
				reason: "value does not match regex pattern \"^[A-Z0-9_-]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return GetCouponRequestMultiError(errors)
	}

	return nil
}

func (m *GetCouponRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCouponRequestMultiError is an error wrapping multiple validation errors
// returned by GetCouponRequest.ValidateAll() if the designated constraints
// aren't met.
type GetCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouponRequestMultiError) AllErrors() []error { return m }

// GetCouponRequestValidationError is the validation error returned by
// GetCouponRequest.Validate if the designated constraints aren't met.
type GetCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouponRequestValidationError) ErrorName() string { return "GetCouponRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouponRequestValidationError{}

var _GetCouponRequest_Code_Pattern = regexp.MustCompile("^[A-Z0-9_-]+$")

// Validate checks the field values on GetCouponResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouponResponseMultiError, or nil if none found.
func (m *GetCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCoupon()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCouponResponseValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCouponResponseValidationError{
					field:  "Coupon",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCoupon()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCouponResponseValidationError{
				field:  "Coupon",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	if len(errors) > 0 {
		return GetCouponResponseMultiError(errors)
	}

	return nil
}

// GetCouponResponseMultiError is an error wrapping multiple validation errors
// returned by GetCouponResponse.ValidateAll() if the designated constraints
// aren't met.
type GetCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouponResponseMultiError) AllErrors() []error { return m }

// GetCouponResponseValidationError is the validation error returned by
// GetCouponResponse.Validate if the designated constraints aren't met.
type GetCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouponResponseValidationError) ErrorName() string {
	return "GetCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouponResponseValidationError{}

// Validate checks the field values on ReserveCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveCouponRequestMultiError, or nil if none found.
func (m *ReserveCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ReserveCouponRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetCouponId()); err != nil {
		err = ReserveCouponRequestValidationError{
			field:  "CouponId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCartTotal() <= 0 {
		err := ReserveCouponRequestValidationError{
			field:  "CartTotal",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReserveCouponRequestMultiError(errors)
	}

	return nil
}

func (m *ReserveCouponRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ReserveCouponRequestMultiError is an error wrapping multiple validation
// errors returned by ReserveCouponRequest.ValidateAll() if the designated
// constraints aren't met.
type ReserveCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveCouponRequestMultiError) AllErrors() []error { return m }

// ReserveCouponRequestValidationError is the validation error returned by
// ReserveCouponRequest.Validate if the designated constraints aren't met.
type ReserveCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveCouponRequestValidationError) ErrorName() string {
	return "ReserveCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveCouponRequestValidationError{}

// Validate checks the field values on ReserveCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReserveCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReserveCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReserveCouponResponseMultiError, or nil if none found.
func (m *ReserveCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReserveCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	// no validation rules for Discount

	// no validation rules for FinalAmount

	// no validation rules for ReservationId

	// no validation rules for CouponId

	// no validation rules for Reason

	// no validation rules for TtlSeconds

	if len(errors) > 0 {
		return ReserveCouponResponseMultiError(errors)
	}

	return nil
}

// ReserveCouponResponseMultiError is an error wrapping multiple validation
// errors returned by ReserveCouponResponse.ValidateAll() if the designated
// constraints aren't met.
type ReserveCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReserveCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReserveCouponResponseMultiError) AllErrors() []error { return m }

// ReserveCouponResponseValidationError is the validation error returned by
// ReserveCouponResponse.Validate if the designated constraints aren't met.
type ReserveCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReserveCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReserveCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReserveCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReserveCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReserveCouponResponseValidationError) ErrorName() string {
	return "ReserveCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReserveCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReserveCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReserveCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReserveCouponResponseValidationError{}

// Validate checks the field values on CalculateDiscountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateDiscountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateDiscountRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalculateDiscountRequestMultiError, or nil if none found.
func (m *CalculateDiscountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateDiscountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetCouponCode()); l < 3 || l > 50 {
		err := CalculateDiscountRequestValidationError{
			field:  "CouponCode",
			reason: "value length must be between 3 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CalculateDiscountRequest_CouponCode_Pattern.MatchString(m.GetCouponCode()) {
		err := CalculateDiscountRequestValidationError{
			field:  "CouponCode",
			reason: "value does not match regex pattern \"^[A-Z0-9_-]+$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := CalculateDiscountRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = CalculateDiscountRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetOrderTime() == nil {
		err := CalculateDiscountRequestValidationError{
			field:  "OrderTime",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PaymentChannel

	// no validation rules for MerchantId

	// no validation rules for CouponToken

	if len(errors) > 0 {
		return CalculateDiscountRequestMultiError(errors)
	}

	return nil
}

func (m *CalculateDiscountRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CalculateDiscountRequestMultiError is an error wrapping multiple validation
// errors returned by CalculateDiscountRequest.ValidateAll() if the designated
// constraints aren't met.
type CalculateDiscountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateDiscountRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateDiscountRequestMultiError) AllErrors() []error { return m }

// CalculateDiscountRequestValidationError is the validation error returned by
// CalculateDiscountRequest.Validate if the designated constraints aren't met.
type CalculateDiscountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateDiscountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateDiscountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateDiscountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateDiscountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateDiscountRequestValidationError) ErrorName() string {
	return "CalculateDiscountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateDiscountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateDiscountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateDiscountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateDiscountRequestValidationError{}

var _CalculateDiscountRequest_CouponCode_Pattern = regexp.MustCompile("^[A-Z0-9_-]+$")

// Validate checks the field values on CalculateDiscountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CalculateDiscountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CalculateDiscountResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CalculateDiscountResponseMultiError, or nil if none found.
func (m *CalculateDiscountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CalculateDiscountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DiscountAmount

	// no validation rules for FinalAmount

	// no validation rules for CouponId

	// no validation rules for Error

	if len(errors) > 0 {
		return CalculateDiscountResponseMultiError(errors)
	}

	return nil
}

// CalculateDiscountResponseMultiError is an error wrapping multiple validation
// errors returned by CalculateDiscountResponse.ValidateAll() if the
// designated constraints aren't met.
type CalculateDiscountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CalculateDiscountResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CalculateDiscountResponseMultiError) AllErrors() []error { return m }

// CalculateDiscountResponseValidationError is the validation error returned by
// CalculateDiscountResponse.Validate if the designated constraints aren't met.
type CalculateDiscountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CalculateDiscountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CalculateDiscountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CalculateDiscountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CalculateDiscountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CalculateDiscountResponseValidationError) ErrorName() string {
	return "CalculateDiscountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CalculateDiscountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCalculateDiscountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CalculateDiscountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CalculateDiscountResponseValidationError{}

// Validate checks the field values on ApplyCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplyCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyCouponRequestMultiError, or nil if none found.
func (m *ApplyCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetIdempotencyKey()) < 1 {
		err := ApplyCouponRequestValidationError{
			field:  "IdempotencyKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ApplyCouponRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrderId()) < 1 {
		err := ApplyCouponRequestValidationError{
			field:  "OrderId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := ApplyCouponRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for PaymentChannel

	// no validation rules for MerchantId

	switch v := m.CouponRef.(type) {
	case *ApplyCouponRequest_CouponCode:
		if v == nil {
			err := ApplyCouponRequestValidationError{
				field:  "CouponRef",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if l := utf8.RuneCountInString(m.GetCouponCode()); l < 3 || l > 50 {
			err := ApplyCouponRequestValidationError{
				field:  "CouponCode",
				reason: "value length must be between 3 and 50 runes, inclusive",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if !_ApplyCouponRequest_CouponCode_Pattern.MatchString(m.GetCouponCode()) {
			err := ApplyCouponRequestValidationError{
				field:  "CouponCode",
				reason: "value does not match regex pattern \"^[A-Z0-9_-]+$\"",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	case *ApplyCouponRequest_CouponId:
		if v == nil {
			err := ApplyCouponRequestValidationError{
				field:  "CouponRef",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if err := m._validateUuid(m.GetCouponId()); err != nil {
			err = ApplyCouponRequestValidationError{
				field:  "CouponId",
				reason: "value must be a valid UUID",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return ApplyCouponRequestMultiError(errors)
	}

	return nil
}

func (m *ApplyCouponRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ApplyCouponRequestMultiError is an error wrapping multiple validation errors
// returned by ApplyCouponRequest.ValidateAll() if the designated constraints
// aren't met.
type ApplyCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyCouponRequestMultiError) AllErrors() []error { return m }

// ApplyCouponRequestValidationError is the validation error returned by
// ApplyCouponRequest.Validate if the designated constraints aren't met.
type ApplyCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyCouponRequestValidationError) ErrorName() string {
	return "ApplyCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyCouponRequestValidationError{}

var _ApplyCouponRequest_CouponCode_Pattern = regexp.MustCompile("^[A-Z0-9_-]+$")

// Validate checks the field values on ApplyCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ApplyCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ApplyCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ApplyCouponResponseMultiError, or nil if none found.
func (m *ApplyCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ApplyCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	// no validation rules for Exp

	// no validation rules for CouponId

	// no validation rules for DiscountAmount

	// no validation rules for FinalAmount

	// no validation rules for Error

	if len(errors) > 0 {
		return ApplyCouponResponseMultiError(errors)
	}

	return nil
}

// ApplyCouponResponseMultiError is an error wrapping multiple validation
// errors returned by ApplyCouponResponse.ValidateAll() if the designated
// constraints aren't met.
type ApplyCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ApplyCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ApplyCouponResponseMultiError) AllErrors() []error { return m }

// ApplyCouponResponseValidationError is the validation error returned by
// ApplyCouponResponse.Validate if the designated constraints aren't met.
type ApplyCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ApplyCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ApplyCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ApplyCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ApplyCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ApplyCouponResponseValidationError) ErrorName() string {
	return "ApplyCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ApplyCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sApplyCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ApplyCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ApplyCouponResponseValidationError{}

// Validate checks the field values on VerifyCouponTokenRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyCouponTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyCouponTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyCouponTokenRequestMultiError, or nil if none found.
func (m *VerifyCouponTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyCouponTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 20 {
		err := VerifyCouponTokenRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return VerifyCouponTokenRequestMultiError(errors)
	}

	return nil
}

// VerifyCouponTokenRequestMultiError is an error wrapping multiple validation
// errors returned by VerifyCouponTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type VerifyCouponTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyCouponTokenRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyCouponTokenRequestMultiError) AllErrors() []error { return m }

// VerifyCouponTokenRequestValidationError is the validation error returned by
// VerifyCouponTokenRequest.Validate if the designated constraints aren't met.
type VerifyCouponTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyCouponTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyCouponTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyCouponTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyCouponTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyCouponTokenRequestValidationError) ErrorName() string {
	return "VerifyCouponTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyCouponTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyCouponTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyCouponTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyCouponTokenRequestValidationError{}

// Validate checks the field values on VerifyCouponTokenResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerifyCouponTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerifyCouponTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerifyCouponTokenResponseMultiError, or nil if none found.
func (m *VerifyCouponTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *VerifyCouponTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	// no validation rules for Error

	// no validation rules for UserId

	// no validation rules for CouponId

	// no validation rules for OrderId

	// no validation rules for PaymentChannel

	// no validation rules for MerchantId

	// no validation rules for Exp

	// no validation rules for Jti

	if len(errors) > 0 {
		return VerifyCouponTokenResponseMultiError(errors)
	}

	return nil
}

// VerifyCouponTokenResponseMultiError is an error wrapping multiple validation
// errors returned by VerifyCouponTokenResponse.ValidateAll() if the
// designated constraints aren't met.
type VerifyCouponTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerifyCouponTokenResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerifyCouponTokenResponseMultiError) AllErrors() []error { return m }

// VerifyCouponTokenResponseValidationError is the validation error returned by
// VerifyCouponTokenResponse.Validate if the designated constraints aren't met.
type VerifyCouponTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerifyCouponTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerifyCouponTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerifyCouponTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerifyCouponTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerifyCouponTokenResponseValidationError) ErrorName() string {
	return "VerifyCouponTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e VerifyCouponTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerifyCouponTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerifyCouponTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerifyCouponTokenResponseValidationError{}

// Validate checks the field values on ConsumeCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConsumeCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsumeCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConsumeCouponRequestMultiError, or nil if none found.
func (m *ConsumeCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsumeCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ConsumeCouponRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOrderId()) < 1 {
		err := ConsumeCouponRequestValidationError{
			field:  "OrderId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTransactionId()) < 1 {
		err := ConsumeCouponRequestValidationError{
			field:  "TransactionId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := ConsumeCouponRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetCouponToken()) < 20 {
		err := ConsumeCouponRequestValidationError{
			field:  "CouponToken",
			reason: "value length must be at least 20 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ConsumeCouponRequestMultiError(errors)
	}

	return nil
}

func (m *ConsumeCouponRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ConsumeCouponRequestMultiError is an error wrapping multiple validation
// errors returned by ConsumeCouponRequest.ValidateAll() if the designated
// constraints aren't met.
type ConsumeCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumeCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumeCouponRequestMultiError) AllErrors() []error { return m }

// ConsumeCouponRequestValidationError is the validation error returned by
// ConsumeCouponRequest.Validate if the designated constraints aren't met.
type ConsumeCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumeCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumeCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumeCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumeCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumeCouponRequestValidationError) ErrorName() string {
	return "ConsumeCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ConsumeCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumeCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumeCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumeCouponRequestValidationError{}

// Validate checks the field values on ConsumeCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ConsumeCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ConsumeCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ConsumeCouponResponseMultiError, or nil if none found.
func (m *ConsumeCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ConsumeCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	// no validation rules for CouponId

	// no validation rules for DiscountAmount

	// no validation rules for FinalAmount

	// no validation rules for Error

	if len(errors) > 0 {
		return ConsumeCouponResponseMultiError(errors)
	}

	return nil
}

// ConsumeCouponResponseMultiError is an error wrapping multiple validation
// errors returned by ConsumeCouponResponse.ValidateAll() if the designated
// constraints aren't met.
type ConsumeCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConsumeCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConsumeCouponResponseMultiError) AllErrors() []error { return m }

// ConsumeCouponResponseValidationError is the validation error returned by
// ConsumeCouponResponse.Validate if the designated constraints aren't met.
type ConsumeCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConsumeCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConsumeCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConsumeCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConsumeCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConsumeCouponResponseValidationError) ErrorName() string {
	return "ConsumeCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ConsumeCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConsumeCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConsumeCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConsumeCouponResponseValidationError{}

// Validate checks the field values on ListClaimCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListClaimCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClaimCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClaimCouponRequestMultiError, or nil if none found.
func (m *ListClaimCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClaimCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ListClaimCouponRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetCartTotal() <= 0 {
		err := ListClaimCouponRequestValidationError{
			field:  "CartTotal",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPage(); val < 1 || val > 1000 {
		err := ListClaimCouponRequestValidationError{
			field:  "Page",
			reason: "value must be inside range [1, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := ListClaimCouponRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListClaimCouponRequestMultiError(errors)
	}

	return nil
}

func (m *ListClaimCouponRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ListClaimCouponRequestMultiError is an error wrapping multiple validation
// errors returned by ListClaimCouponRequest.ValidateAll() if the designated
// constraints aren't met.
type ListClaimCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClaimCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClaimCouponRequestMultiError) AllErrors() []error { return m }

// ListClaimCouponRequestValidationError is the validation error returned by
// ListClaimCouponRequest.Validate if the designated constraints aren't met.
type ListClaimCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClaimCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClaimCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClaimCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClaimCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClaimCouponRequestValidationError) ErrorName() string {
	return "ListClaimCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListClaimCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClaimCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClaimCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClaimCouponRequestValidationError{}

// Validate checks the field values on ListClaimCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListClaimCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListClaimCouponResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListClaimCouponResponseMultiError, or nil if none found.
func (m *ListClaimCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListClaimCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetCoupons() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListClaimCouponResponseValidationError{
						field:  fmt.Sprintf("Coupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListClaimCouponResponseValidationError{
						field:  fmt.Sprintf("Coupons[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListClaimCouponResponseValidationError{
					field:  fmt.Sprintf("Coupons[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Error

	if len(errors) > 0 {
		return ListClaimCouponResponseMultiError(errors)
	}

	return nil
}

// ListClaimCouponResponseMultiError is an error wrapping multiple validation
// errors returned by ListClaimCouponResponse.ValidateAll() if the designated
// constraints aren't met.
type ListClaimCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListClaimCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListClaimCouponResponseMultiError) AllErrors() []error { return m }

// ListClaimCouponResponseValidationError is the validation error returned by
// ListClaimCouponResponse.Validate if the designated constraints aren't met.
type ListClaimCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListClaimCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListClaimCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListClaimCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListClaimCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListClaimCouponResponseValidationError) ErrorName() string {
	return "ListClaimCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListClaimCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListClaimCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListClaimCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListClaimCouponResponseValidationError{}

// Validate checks the field values on ValidateReservationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateReservationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateReservationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateReservationRequestMultiError, or nil if none found.
func (m *ValidateReservationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateReservationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetReservationId()); err != nil {
		err = ValidateReservationRequestValidationError{
			field:  "ReservationId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ValidateReservationRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ValidateReservationRequestMultiError(errors)
	}

	return nil
}

func (m *ValidateReservationRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ValidateReservationRequestMultiError is an error wrapping multiple
// validation errors returned by ValidateReservationRequest.ValidateAll() if
// the designated constraints aren't met.
type ValidateReservationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateReservationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateReservationRequestMultiError) AllErrors() []error { return m }

// ValidateReservationRequestValidationError is the validation error returned
// by ValidateReservationRequest.Validate if the designated constraints aren't met.
type ValidateReservationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateReservationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateReservationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateReservationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateReservationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateReservationRequestValidationError) ErrorName() string {
	return "ValidateReservationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateReservationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateReservationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateReservationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateReservationRequestValidationError{}

// Validate checks the field values on ValidateReservationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ValidateReservationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ValidateReservationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ValidateReservationResponseMultiError, or nil if none found.
func (m *ValidateReservationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ValidateReservationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Valid

	// no validation rules for Error

	// no validation rules for CouponId

	if len(errors) > 0 {
		return ValidateReservationResponseMultiError(errors)
	}

	return nil
}

// ValidateReservationResponseMultiError is an error wrapping multiple
// validation errors returned by ValidateReservationResponse.ValidateAll() if
// the designated constraints aren't met.
type ValidateReservationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ValidateReservationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ValidateReservationResponseMultiError) AllErrors() []error { return m }

// ValidateReservationResponseValidationError is the validation error returned
// by ValidateReservationResponse.Validate if the designated constraints
// aren't met.
type ValidateReservationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ValidateReservationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ValidateReservationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ValidateReservationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ValidateReservationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ValidateReservationResponseValidationError) ErrorName() string {
	return "ValidateReservationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ValidateReservationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sValidateReservationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ValidateReservationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ValidateReservationResponseValidationError{}

// Validate checks the field values on ClaimCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClaimCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClaimCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClaimCouponRequestMultiError, or nil if none found.
func (m *ClaimCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ClaimCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCouponId()); err != nil {
		err = ClaimCouponRequestValidationError{
			field:  "CouponId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = ClaimCouponRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ClaimCouponRequestMultiError(errors)
	}

	return nil
}

func (m *ClaimCouponRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ClaimCouponRequestMultiError is an error wrapping multiple validation errors
// returned by ClaimCouponRequest.ValidateAll() if the designated constraints
// aren't met.
type ClaimCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClaimCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClaimCouponRequestMultiError) AllErrors() []error { return m }

// ClaimCouponRequestValidationError is the validation error returned by
// ClaimCouponRequest.Validate if the designated constraints aren't met.
type ClaimCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClaimCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClaimCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClaimCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClaimCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClaimCouponRequestValidationError) ErrorName() string {
	return "ClaimCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ClaimCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClaimCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClaimCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClaimCouponRequestValidationError{}

// Validate checks the field values on ClaimCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ClaimCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ClaimCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ClaimCouponResponseMultiError, or nil if none found.
func (m *ClaimCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ClaimCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ok

	// no validation rules for Error

	if len(errors) > 0 {
		return ClaimCouponResponseMultiError(errors)
	}

	return nil
}

// ClaimCouponResponseMultiError is an error wrapping multiple validation
// errors returned by ClaimCouponResponse.ValidateAll() if the designated
// constraints aren't met.
type ClaimCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ClaimCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ClaimCouponResponseMultiError) AllErrors() []error { return m }

// ClaimCouponResponseValidationError is the validation error returned by
// ClaimCouponResponse.Validate if the designated constraints aren't met.
type ClaimCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ClaimCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ClaimCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ClaimCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ClaimCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ClaimCouponResponseValidationError) ErrorName() string {
	return "ClaimCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ClaimCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sClaimCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ClaimCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ClaimCouponResponseValidationError{}

// Validate checks the field values on TriggerReconciliationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerReconciliationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerReconciliationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerReconciliationRequestMultiError, or nil if none found.
func (m *TriggerReconciliationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerReconciliationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TriggerReconciliationRequestMultiError(errors)
	}

	return nil
}

// TriggerReconciliationRequestMultiError is an error wrapping multiple
// validation errors returned by TriggerReconciliationRequest.ValidateAll() if
// the designated constraints aren't met.
type TriggerReconciliationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerReconciliationRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerReconciliationRequestMultiError) AllErrors() []error { return m }

// TriggerReconciliationRequestValidationError is the validation error returned
// by TriggerReconciliationRequest.Validate if the designated constraints
// aren't met.
type TriggerReconciliationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerReconciliationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerReconciliationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerReconciliationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerReconciliationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerReconciliationRequestValidationError) ErrorName() string {
	return "TriggerReconciliationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerReconciliationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerReconciliationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerReconciliationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerReconciliationRequestValidationError{}

// Validate checks the field values on ReconciliationReport with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReconciliationReport) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReconciliationReport with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReconciliationReportMultiError, or nil if none found.
func (m *ReconciliationReport) ValidateAll() error {
	return m.validate(true)
}

func (m *ReconciliationReport) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CouponId

	// no validation rules for CouponCode

	// no validation rules for DatabaseUsage

	// no validation rules for RedisUsage

	// no validation rules for RedisReservations

	// no validation rules for TotalRedisUsage

	// no validation rules for Discrepancy

	// no validation rules for Action

	if all {
		switch v := interface{}(m.GetTimestamp()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReconciliationReportValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReconciliationReportValidationError{
					field:  "Timestamp",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimestamp()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReconciliationReportValidationError{
				field:  "Timestamp",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReconciliationReportMultiError(errors)
	}

	return nil
}

// ReconciliationReportMultiError is an error wrapping multiple validation
// errors returned by ReconciliationReport.ValidateAll() if the designated
// constraints aren't met.
type ReconciliationReportMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReconciliationReportMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReconciliationReportMultiError) AllErrors() []error { return m }

// ReconciliationReportValidationError is the validation error returned by
// ReconciliationReport.Validate if the designated constraints aren't met.
type ReconciliationReportValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReconciliationReportValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReconciliationReportValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReconciliationReportValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReconciliationReportValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReconciliationReportValidationError) ErrorName() string {
	return "ReconciliationReportValidationError"
}

// Error satisfies the builtin error interface
func (e ReconciliationReportValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReconciliationReport.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReconciliationReportValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReconciliationReportValidationError{}

// Validate checks the field values on TriggerReconciliationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerReconciliationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerReconciliationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TriggerReconciliationResponseMultiError, or nil if none found.
func (m *TriggerReconciliationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerReconciliationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for TotalCoupons

	// no validation rules for DiscrepanciesFound

	// no validation rules for DiscrepanciesFixed

	// no validation rules for TotalDiscrepancy

	for idx, item := range m.GetReports() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TriggerReconciliationResponseValidationError{
						field:  fmt.Sprintf("Reports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TriggerReconciliationResponseValidationError{
						field:  fmt.Sprintf("Reports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TriggerReconciliationResponseValidationError{
					field:  fmt.Sprintf("Reports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Error

	if len(errors) > 0 {
		return TriggerReconciliationResponseMultiError(errors)
	}

	return nil
}

// TriggerReconciliationResponseMultiError is an error wrapping multiple
// validation errors returned by TriggerReconciliationResponse.ValidateAll()
// if the designated constraints aren't met.
type TriggerReconciliationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerReconciliationResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerReconciliationResponseMultiError) AllErrors() []error { return m }

// TriggerReconciliationResponseValidationError is the validation error
// returned by TriggerReconciliationResponse.Validate if the designated
// constraints aren't met.
type TriggerReconciliationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerReconciliationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerReconciliationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerReconciliationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerReconciliationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerReconciliationResponseValidationError) ErrorName() string {
	return "TriggerReconciliationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerReconciliationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerReconciliationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerReconciliationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerReconciliationResponseValidationError{}

// Validate checks the field values on ReconcileCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReconcileCouponRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReconcileCouponRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReconcileCouponRequestMultiError, or nil if none found.
func (m *ReconcileCouponRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReconcileCouponRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCouponId()); err != nil {
		err = ReconcileCouponRequestValidationError{
			field:  "CouponId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ReconcileCouponRequestMultiError(errors)
	}

	return nil
}

func (m *ReconcileCouponRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// ReconcileCouponRequestMultiError is an error wrapping multiple validation
// errors returned by ReconcileCouponRequest.ValidateAll() if the designated
// constraints aren't met.
type ReconcileCouponRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReconcileCouponRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReconcileCouponRequestMultiError) AllErrors() []error { return m }

// ReconcileCouponRequestValidationError is the validation error returned by
// ReconcileCouponRequest.Validate if the designated constraints aren't met.
type ReconcileCouponRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReconcileCouponRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReconcileCouponRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReconcileCouponRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReconcileCouponRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReconcileCouponRequestValidationError) ErrorName() string {
	return "ReconcileCouponRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReconcileCouponRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReconcileCouponRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReconcileCouponRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReconcileCouponRequestValidationError{}

// Validate checks the field values on ReconcileCouponResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReconcileCouponResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReconcileCouponResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReconcileCouponResponseMultiError, or nil if none found.
func (m *ReconcileCouponResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReconcileCouponResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if all {
		switch v := interface{}(m.GetReport()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReconcileCouponResponseValidationError{
					field:  "Report",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReconcileCouponResponseValidationError{
					field:  "Report",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetReport()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReconcileCouponResponseValidationError{
				field:  "Report",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	if len(errors) > 0 {
		return ReconcileCouponResponseMultiError(errors)
	}

	return nil
}

// ReconcileCouponResponseMultiError is an error wrapping multiple validation
// errors returned by ReconcileCouponResponse.ValidateAll() if the designated
// constraints aren't met.
type ReconcileCouponResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReconcileCouponResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReconcileCouponResponseMultiError) AllErrors() []error { return m }

// ReconcileCouponResponseValidationError is the validation error returned by
// ReconcileCouponResponse.Validate if the designated constraints aren't met.
type ReconcileCouponResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReconcileCouponResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReconcileCouponResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReconcileCouponResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReconcileCouponResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReconcileCouponResponseValidationError) ErrorName() string {
	return "ReconcileCouponResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReconcileCouponResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReconcileCouponResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReconcileCouponResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReconcileCouponResponseValidationError{}

// Validate checks the field values on GetReconciliationStatsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReconciliationStatsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReconciliationStatsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetReconciliationStatsRequestMultiError, or nil if none found.
func (m *GetReconciliationStatsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReconciliationStatsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetReconciliationStatsRequestMultiError(errors)
	}

	return nil
}

// GetReconciliationStatsRequestMultiError is an error wrapping multiple
// validation errors returned by GetReconciliationStatsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetReconciliationStatsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReconciliationStatsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReconciliationStatsRequestMultiError) AllErrors() []error { return m }

// GetReconciliationStatsRequestValidationError is the validation error
// returned by GetReconciliationStatsRequest.Validate if the designated
// constraints aren't met.
type GetReconciliationStatsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReconciliationStatsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReconciliationStatsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReconciliationStatsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReconciliationStatsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReconciliationStatsRequestValidationError) ErrorName() string {
	return "GetReconciliationStatsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetReconciliationStatsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReconciliationStatsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReconciliationStatsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReconciliationStatsRequestValidationError{}

// Validate checks the field values on GetReconciliationStatsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetReconciliationStatsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetReconciliationStatsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetReconciliationStatsResponseMultiError, or nil if none found.
func (m *GetReconciliationStatsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetReconciliationStatsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TotalCoupons

	// no validation rules for DiscrepanciesFound

	// no validation rules for TotalDiscrepancy

	if all {
		switch v := interface{}(m.GetLastChecked()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetReconciliationStatsResponseValidationError{
					field:  "LastChecked",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetReconciliationStatsResponseValidationError{
					field:  "LastChecked",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLastChecked()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetReconciliationStatsResponseValidationError{
				field:  "LastChecked",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	if len(errors) > 0 {
		return GetReconciliationStatsResponseMultiError(errors)
	}

	return nil
}

// GetReconciliationStatsResponseMultiError is an error wrapping multiple
// validation errors returned by GetReconciliationStatsResponse.ValidateAll()
// if the designated constraints aren't met.
type GetReconciliationStatsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetReconciliationStatsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetReconciliationStatsResponseMultiError) AllErrors() []error { return m }

// GetReconciliationStatsResponseValidationError is the validation error
// returned by GetReconciliationStatsResponse.Validate if the designated
// constraints aren't met.
type GetReconciliationStatsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetReconciliationStatsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetReconciliationStatsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetReconciliationStatsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetReconciliationStatsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetReconciliationStatsResponseValidationError) ErrorName() string {
	return "GetReconciliationStatsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetReconciliationStatsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetReconciliationStatsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetReconciliationStatsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetReconciliationStatsResponseValidationError{}

// Validate checks the field values on CompensateUsageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompensateUsageRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompensateUsageRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompensateUsageRequestMultiError, or nil if none found.
func (m *CompensateUsageRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CompensateUsageRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCouponId()); err != nil {
		err = CompensateUsageRequestValidationError{
			field:  "CouponId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := CompensateUsageRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetReason()); l < 1 || l > 255 {
		err := CompensateUsageRequestValidationError{
			field:  "Reason",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CompensateUsageRequestMultiError(errors)
	}

	return nil
}

func (m *CompensateUsageRequest) _validateUuid(uuid string) error {
	if matched := _coupon_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CompensateUsageRequestMultiError is an error wrapping multiple validation
// errors returned by CompensateUsageRequest.ValidateAll() if the designated
// constraints aren't met.
type CompensateUsageRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompensateUsageRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompensateUsageRequestMultiError) AllErrors() []error { return m }

// CompensateUsageRequestValidationError is the validation error returned by
// CompensateUsageRequest.Validate if the designated constraints aren't met.
type CompensateUsageRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompensateUsageRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompensateUsageRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompensateUsageRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompensateUsageRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompensateUsageRequestValidationError) ErrorName() string {
	return "CompensateUsageRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CompensateUsageRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompensateUsageRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompensateUsageRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompensateUsageRequestValidationError{}

// Validate checks the field values on CompensateUsageResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CompensateUsageResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CompensateUsageResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CompensateUsageResponseMultiError, or nil if none found.
func (m *CompensateUsageResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CompensateUsageResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	// no validation rules for CouponId

	// no validation rules for Compensated

	// no validation rules for Reason

	// no validation rules for Error

	if len(errors) > 0 {
		return CompensateUsageResponseMultiError(errors)
	}

	return nil
}

// CompensateUsageResponseMultiError is an error wrapping multiple validation
// errors returned by CompensateUsageResponse.ValidateAll() if the designated
// constraints aren't met.
type CompensateUsageResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CompensateUsageResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CompensateUsageResponseMultiError) AllErrors() []error { return m }

// CompensateUsageResponseValidationError is the validation error returned by
// CompensateUsageResponse.Validate if the designated constraints aren't met.
type CompensateUsageResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CompensateUsageResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CompensateUsageResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CompensateUsageResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CompensateUsageResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CompensateUsageResponseValidationError) ErrorName() string {
	return "CompensateUsageResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CompensateUsageResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCompensateUsageResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CompensateUsageResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CompensateUsageResponseValidationError{}

// Validate checks the field values on Merchant with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Merchant) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Merchant with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MerchantMultiError, or nil
// if none found.
func (m *Merchant) ValidateAll() error {
	return m.validate(true)
}

func (m *Merchant) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := MerchantValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCategory()); l < 1 || l > 100 {
		err := MerchantValidationError{
			field:  "Category",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 500 {
		err := MerchantValidationError{
			field:  "Description",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return MerchantMultiError(errors)
	}

	return nil
}

// MerchantMultiError is an error wrapping multiple validation errors returned
// by Merchant.ValidateAll() if the designated constraints aren't met.
type MerchantMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MerchantMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MerchantMultiError) AllErrors() []error { return m }

// MerchantValidationError is the validation error returned by
// Merchant.Validate if the designated constraints aren't met.
type MerchantValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MerchantValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MerchantValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MerchantValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MerchantValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MerchantValidationError) ErrorName() string { return "MerchantValidationError" }

// Error satisfies the builtin error interface
func (e MerchantValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMerchant.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MerchantValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MerchantValidationError{}

// Validate checks the field values on PaymentChannel with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PaymentChannel) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PaymentChannel with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PaymentChannelMultiError,
// or nil if none found.
func (m *PaymentChannel) ValidateAll() error {
	return m.validate(true)
}

func (m *PaymentChannel) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 255 {
		err := PaymentChannelValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 255 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCategory()); l < 1 || l > 100 {
		err := PaymentChannelValidationError{
			field:  "Category",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PaymentChannelMultiError(errors)
	}

	return nil
}

// PaymentChannelMultiError is an error wrapping multiple validation errors
// returned by PaymentChannel.ValidateAll() if the designated constraints
// aren't met.
type PaymentChannelMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PaymentChannelMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PaymentChannelMultiError) AllErrors() []error { return m }

// PaymentChannelValidationError is the validation error returned by
// PaymentChannel.Validate if the designated constraints aren't met.
type PaymentChannelValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PaymentChannelValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PaymentChannelValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PaymentChannelValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PaymentChannelValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PaymentChannelValidationError) ErrorName() string { return "PaymentChannelValidationError" }

// Error satisfies the builtin error interface
func (e PaymentChannelValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPaymentChannel.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PaymentChannelValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PaymentChannelValidationError{}

// Validate checks the field values on ListMerchantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMerchantsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMerchantsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMerchantsRequestMultiError, or nil if none found.
func (m *ListMerchantsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMerchantsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListMerchantsRequestMultiError(errors)
	}

	return nil
}

// ListMerchantsRequestMultiError is an error wrapping multiple validation
// errors returned by ListMerchantsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListMerchantsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMerchantsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMerchantsRequestMultiError) AllErrors() []error { return m }

// ListMerchantsRequestValidationError is the validation error returned by
// ListMerchantsRequest.Validate if the designated constraints aren't met.
type ListMerchantsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMerchantsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMerchantsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMerchantsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMerchantsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMerchantsRequestValidationError) ErrorName() string {
	return "ListMerchantsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMerchantsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMerchantsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMerchantsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMerchantsRequestValidationError{}

// Validate checks the field values on ListMerchantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListMerchantsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListMerchantsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListMerchantsResponseMultiError, or nil if none found.
func (m *ListMerchantsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListMerchantsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMerchants() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListMerchantsResponseValidationError{
						field:  fmt.Sprintf("Merchants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListMerchantsResponseValidationError{
						field:  fmt.Sprintf("Merchants[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMerchantsResponseValidationError{
					field:  fmt.Sprintf("Merchants[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Error

	if len(errors) > 0 {
		return ListMerchantsResponseMultiError(errors)
	}

	return nil
}

// ListMerchantsResponseMultiError is an error wrapping multiple validation
// errors returned by ListMerchantsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListMerchantsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListMerchantsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListMerchantsResponseMultiError) AllErrors() []error { return m }

// ListMerchantsResponseValidationError is the validation error returned by
// ListMerchantsResponse.Validate if the designated constraints aren't met.
type ListMerchantsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMerchantsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMerchantsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMerchantsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMerchantsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMerchantsResponseValidationError) ErrorName() string {
	return "ListMerchantsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMerchantsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMerchantsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMerchantsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMerchantsResponseValidationError{}

// Validate checks the field values on ListPaymentChannelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPaymentChannelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPaymentChannelsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPaymentChannelsRequestMultiError, or nil if none found.
func (m *ListPaymentChannelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPaymentChannelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListPaymentChannelsRequestMultiError(errors)
	}

	return nil
}

// ListPaymentChannelsRequestMultiError is an error wrapping multiple
// validation errors returned by ListPaymentChannelsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListPaymentChannelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPaymentChannelsRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPaymentChannelsRequestMultiError) AllErrors() []error { return m }

// ListPaymentChannelsRequestValidationError is the validation error returned
// by ListPaymentChannelsRequest.Validate if the designated constraints aren't met.
type ListPaymentChannelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPaymentChannelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPaymentChannelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPaymentChannelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPaymentChannelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPaymentChannelsRequestValidationError) ErrorName() string {
	return "ListPaymentChannelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPaymentChannelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPaymentChannelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPaymentChannelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPaymentChannelsRequestValidationError{}

// Validate checks the field values on ListPaymentChannelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPaymentChannelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPaymentChannelsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPaymentChannelsResponseMultiError, or nil if none found.
func (m *ListPaymentChannelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPaymentChannelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetPaymentChannels() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPaymentChannelsResponseValidationError{
						field:  fmt.Sprintf("PaymentChannels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPaymentChannelsResponseValidationError{
						field:  fmt.Sprintf("PaymentChannels[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPaymentChannelsResponseValidationError{
					field:  fmt.Sprintf("PaymentChannels[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Error

	if len(errors) > 0 {
		return ListPaymentChannelsResponseMultiError(errors)
	}

	return nil
}

// ListPaymentChannelsResponseMultiError is an error wrapping multiple
// validation errors returned by ListPaymentChannelsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListPaymentChannelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPaymentChannelsResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPaymentChannelsResponseMultiError) AllErrors() []error { return m }

// ListPaymentChannelsResponseValidationError is the validation error returned
// by ListPaymentChannelsResponse.Validate if the designated constraints
// aren't met.
type ListPaymentChannelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPaymentChannelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPaymentChannelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPaymentChannelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPaymentChannelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPaymentChannelsResponseValidationError) ErrorName() string {
	return "ListPaymentChannelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPaymentChannelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPaymentChannelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPaymentChannelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPaymentChannelsResponseValidationError{}
