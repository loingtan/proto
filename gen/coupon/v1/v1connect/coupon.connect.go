// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: coupon/v1/coupon.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/loingtan/proto/gen/coupon/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CouponServiceName is the fully-qualified name of the CouponService service.
	CouponServiceName = "coupon.CouponService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CouponServiceGetCouponProcedure is the fully-qualified name of the CouponService's GetCoupon RPC.
	CouponServiceGetCouponProcedure = "/coupon.CouponService/GetCoupon"
	// CouponServiceListCouponsProcedure is the fully-qualified name of the CouponService's ListCoupons
	// RPC.
	CouponServiceListCouponsProcedure = "/coupon.CouponService/ListCoupons"
	// CouponServiceCreateCouponProcedure is the fully-qualified name of the CouponService's
	// CreateCoupon RPC.
	CouponServiceCreateCouponProcedure = "/coupon.CouponService/CreateCoupon"
	// CouponServiceUpdateCouponProcedure is the fully-qualified name of the CouponService's
	// UpdateCoupon RPC.
	CouponServiceUpdateCouponProcedure = "/coupon.CouponService/UpdateCoupon"
	// CouponServiceDeleteCouponProcedure is the fully-qualified name of the CouponService's
	// DeleteCoupon RPC.
	CouponServiceDeleteCouponProcedure = "/coupon.CouponService/DeleteCoupon"
	// CouponServiceClaimCouponProcedure is the fully-qualified name of the CouponService's ClaimCoupon
	// RPC.
	CouponServiceClaimCouponProcedure = "/coupon.CouponService/ClaimCoupon"
	// CouponServiceReserveCouponProcedure is the fully-qualified name of the CouponService's
	// ReserveCoupon RPC.
	CouponServiceReserveCouponProcedure = "/coupon.CouponService/ReserveCoupon"
	// CouponServiceValidateReservationProcedure is the fully-qualified name of the CouponService's
	// ValidateReservation RPC.
	CouponServiceValidateReservationProcedure = "/coupon.CouponService/ValidateReservation"
	// CouponServiceListClaimCouponProcedure is the fully-qualified name of the CouponService's
	// ListClaimCoupon RPC.
	CouponServiceListClaimCouponProcedure = "/coupon.CouponService/ListClaimCoupon"
	// CouponServiceCalculateDiscountProcedure is the fully-qualified name of the CouponService's
	// CalculateDiscount RPC.
	CouponServiceCalculateDiscountProcedure = "/coupon.CouponService/CalculateDiscount"
	// CouponServiceApplyCouponProcedure is the fully-qualified name of the CouponService's ApplyCoupon
	// RPC.
	CouponServiceApplyCouponProcedure = "/coupon.CouponService/ApplyCoupon"
	// CouponServiceVerifyCouponTokenProcedure is the fully-qualified name of the CouponService's
	// VerifyCouponToken RPC.
	CouponServiceVerifyCouponTokenProcedure = "/coupon.CouponService/VerifyCouponToken"
	// CouponServiceConsumeCouponProcedure is the fully-qualified name of the CouponService's
	// ConsumeCoupon RPC.
	CouponServiceConsumeCouponProcedure = "/coupon.CouponService/ConsumeCoupon"
	// CouponServiceTriggerReconciliationProcedure is the fully-qualified name of the CouponService's
	// TriggerReconciliation RPC.
	CouponServiceTriggerReconciliationProcedure = "/coupon.CouponService/TriggerReconciliation"
	// CouponServiceReconcileCouponProcedure is the fully-qualified name of the CouponService's
	// ReconcileCoupon RPC.
	CouponServiceReconcileCouponProcedure = "/coupon.CouponService/ReconcileCoupon"
	// CouponServiceGetReconciliationStatsProcedure is the fully-qualified name of the CouponService's
	// GetReconciliationStats RPC.
	CouponServiceGetReconciliationStatsProcedure = "/coupon.CouponService/GetReconciliationStats"
	// CouponServiceCompensateUsageProcedure is the fully-qualified name of the CouponService's
	// CompensateUsage RPC.
	CouponServiceCompensateUsageProcedure = "/coupon.CouponService/CompensateUsage"
	// CouponServiceListMerchantsProcedure is the fully-qualified name of the CouponService's
	// ListMerchants RPC.
	CouponServiceListMerchantsProcedure = "/coupon.CouponService/ListMerchants"
	// CouponServiceListPaymentChannelsProcedure is the fully-qualified name of the CouponService's
	// ListPaymentChannels RPC.
	CouponServiceListPaymentChannelsProcedure = "/coupon.CouponService/ListPaymentChannels"
)

// CouponServiceClient is a client for the coupon.CouponService service.
type CouponServiceClient interface {
	GetCoupon(context.Context, *connect.Request[v1.GetCouponRequest]) (*connect.Response[v1.GetCouponResponse], error)
	ListCoupons(context.Context, *connect.Request[v1.ListCouponsRequest]) (*connect.Response[v1.ListCouponsResponse], error)
	CreateCoupon(context.Context, *connect.Request[v1.CreateCouponRequest]) (*connect.Response[v1.CreateCouponResponse], error)
	UpdateCoupon(context.Context, *connect.Request[v1.UpdateCouponRequest]) (*connect.Response[v1.UpdateCouponResponse], error)
	DeleteCoupon(context.Context, *connect.Request[v1.DeleteCouponRequest]) (*connect.Response[v1.DeleteCouponResponse], error)
	ClaimCoupon(context.Context, *connect.Request[v1.ClaimCouponRequest]) (*connect.Response[v1.ClaimCouponResponse], error)
	ReserveCoupon(context.Context, *connect.Request[v1.ReserveCouponRequest]) (*connect.Response[v1.ReserveCouponResponse], error)
	ValidateReservation(context.Context, *connect.Request[v1.ValidateReservationRequest]) (*connect.Response[v1.ValidateReservationResponse], error)
	ListClaimCoupon(context.Context, *connect.Request[v1.ListClaimCouponRequest]) (*connect.Response[v1.ListClaimCouponResponse], error)
	CalculateDiscount(context.Context, *connect.Request[v1.CalculateDiscountRequest]) (*connect.Response[v1.CalculateDiscountResponse], error)
	// ApplyCoupon mints a shortâ€‘lived JWT coupon token after validating
	// policy (time window, min spend, merchant/payment constraints, etc.).
	// Use this for FE -> API -> coupon-service path to get {token, exp}.
	ApplyCoupon(context.Context, *connect.Request[v1.ApplyCouponRequest]) (*connect.Response[v1.ApplyCouponResponse], error)
	// VerifyCouponToken verifies RS256 token and returns parsed claims for
	// defense-in-depth checks by the caller. Optional for strong callers.
	VerifyCouponToken(context.Context, *connect.Request[v1.VerifyCouponTokenRequest]) (*connect.Response[v1.VerifyCouponTokenResponse], error)
	// ConsumeCoupon commits a coupon redemption idempotently. Caller passes
	// order_id, transaction_id, amount, and the JWT token. The service enforces
	// uniqueness by (transaction_id) and (coupon_id, user_id, order_id).
	ConsumeCoupon(context.Context, *connect.Request[v1.ConsumeCouponRequest]) (*connect.Response[v1.ConsumeCouponResponse], error)
	// Reconciliation endpoints for admin/monitoring purposes
	TriggerReconciliation(context.Context, *connect.Request[v1.TriggerReconciliationRequest]) (*connect.Response[v1.TriggerReconciliationResponse], error)
	ReconcileCoupon(context.Context, *connect.Request[v1.ReconcileCouponRequest]) (*connect.Response[v1.ReconcileCouponResponse], error)
	GetReconciliationStats(context.Context, *connect.Request[v1.GetReconciliationStatsRequest]) (*connect.Response[v1.GetReconciliationStatsResponse], error)
	CompensateUsage(context.Context, *connect.Request[v1.CompensateUsageRequest]) (*connect.Response[v1.CompensateUsageResponse], error)
	// Merchant and Payment Channel reference data
	ListMerchants(context.Context, *connect.Request[v1.ListMerchantsRequest]) (*connect.Response[v1.ListMerchantsResponse], error)
	ListPaymentChannels(context.Context, *connect.Request[v1.ListPaymentChannelsRequest]) (*connect.Response[v1.ListPaymentChannelsResponse], error)
}

// NewCouponServiceClient constructs a client for the coupon.CouponService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCouponServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CouponServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	couponServiceMethods := v1.File_coupon_v1_coupon_proto.Services().ByName("CouponService").Methods()
	return &couponServiceClient{
		getCoupon: connect.NewClient[v1.GetCouponRequest, v1.GetCouponResponse](
			httpClient,
			baseURL+CouponServiceGetCouponProcedure,
			connect.WithSchema(couponServiceMethods.ByName("GetCoupon")),
			connect.WithClientOptions(opts...),
		),
		listCoupons: connect.NewClient[v1.ListCouponsRequest, v1.ListCouponsResponse](
			httpClient,
			baseURL+CouponServiceListCouponsProcedure,
			connect.WithSchema(couponServiceMethods.ByName("ListCoupons")),
			connect.WithClientOptions(opts...),
		),
		createCoupon: connect.NewClient[v1.CreateCouponRequest, v1.CreateCouponResponse](
			httpClient,
			baseURL+CouponServiceCreateCouponProcedure,
			connect.WithSchema(couponServiceMethods.ByName("CreateCoupon")),
			connect.WithClientOptions(opts...),
		),
		updateCoupon: connect.NewClient[v1.UpdateCouponRequest, v1.UpdateCouponResponse](
			httpClient,
			baseURL+CouponServiceUpdateCouponProcedure,
			connect.WithSchema(couponServiceMethods.ByName("UpdateCoupon")),
			connect.WithClientOptions(opts...),
		),
		deleteCoupon: connect.NewClient[v1.DeleteCouponRequest, v1.DeleteCouponResponse](
			httpClient,
			baseURL+CouponServiceDeleteCouponProcedure,
			connect.WithSchema(couponServiceMethods.ByName("DeleteCoupon")),
			connect.WithClientOptions(opts...),
		),
		claimCoupon: connect.NewClient[v1.ClaimCouponRequest, v1.ClaimCouponResponse](
			httpClient,
			baseURL+CouponServiceClaimCouponProcedure,
			connect.WithSchema(couponServiceMethods.ByName("ClaimCoupon")),
			connect.WithClientOptions(opts...),
		),
		reserveCoupon: connect.NewClient[v1.ReserveCouponRequest, v1.ReserveCouponResponse](
			httpClient,
			baseURL+CouponServiceReserveCouponProcedure,
			connect.WithSchema(couponServiceMethods.ByName("ReserveCoupon")),
			connect.WithClientOptions(opts...),
		),
		validateReservation: connect.NewClient[v1.ValidateReservationRequest, v1.ValidateReservationResponse](
			httpClient,
			baseURL+CouponServiceValidateReservationProcedure,
			connect.WithSchema(couponServiceMethods.ByName("ValidateReservation")),
			connect.WithClientOptions(opts...),
		),
		listClaimCoupon: connect.NewClient[v1.ListClaimCouponRequest, v1.ListClaimCouponResponse](
			httpClient,
			baseURL+CouponServiceListClaimCouponProcedure,
			connect.WithSchema(couponServiceMethods.ByName("ListClaimCoupon")),
			connect.WithClientOptions(opts...),
		),
		calculateDiscount: connect.NewClient[v1.CalculateDiscountRequest, v1.CalculateDiscountResponse](
			httpClient,
			baseURL+CouponServiceCalculateDiscountProcedure,
			connect.WithSchema(couponServiceMethods.ByName("CalculateDiscount")),
			connect.WithClientOptions(opts...),
		),
		applyCoupon: connect.NewClient[v1.ApplyCouponRequest, v1.ApplyCouponResponse](
			httpClient,
			baseURL+CouponServiceApplyCouponProcedure,
			connect.WithSchema(couponServiceMethods.ByName("ApplyCoupon")),
			connect.WithClientOptions(opts...),
		),
		verifyCouponToken: connect.NewClient[v1.VerifyCouponTokenRequest, v1.VerifyCouponTokenResponse](
			httpClient,
			baseURL+CouponServiceVerifyCouponTokenProcedure,
			connect.WithSchema(couponServiceMethods.ByName("VerifyCouponToken")),
			connect.WithClientOptions(opts...),
		),
		consumeCoupon: connect.NewClient[v1.ConsumeCouponRequest, v1.ConsumeCouponResponse](
			httpClient,
			baseURL+CouponServiceConsumeCouponProcedure,
			connect.WithSchema(couponServiceMethods.ByName("ConsumeCoupon")),
			connect.WithClientOptions(opts...),
		),
		triggerReconciliation: connect.NewClient[v1.TriggerReconciliationRequest, v1.TriggerReconciliationResponse](
			httpClient,
			baseURL+CouponServiceTriggerReconciliationProcedure,
			connect.WithSchema(couponServiceMethods.ByName("TriggerReconciliation")),
			connect.WithClientOptions(opts...),
		),
		reconcileCoupon: connect.NewClient[v1.ReconcileCouponRequest, v1.ReconcileCouponResponse](
			httpClient,
			baseURL+CouponServiceReconcileCouponProcedure,
			connect.WithSchema(couponServiceMethods.ByName("ReconcileCoupon")),
			connect.WithClientOptions(opts...),
		),
		getReconciliationStats: connect.NewClient[v1.GetReconciliationStatsRequest, v1.GetReconciliationStatsResponse](
			httpClient,
			baseURL+CouponServiceGetReconciliationStatsProcedure,
			connect.WithSchema(couponServiceMethods.ByName("GetReconciliationStats")),
			connect.WithClientOptions(opts...),
		),
		compensateUsage: connect.NewClient[v1.CompensateUsageRequest, v1.CompensateUsageResponse](
			httpClient,
			baseURL+CouponServiceCompensateUsageProcedure,
			connect.WithSchema(couponServiceMethods.ByName("CompensateUsage")),
			connect.WithClientOptions(opts...),
		),
		listMerchants: connect.NewClient[v1.ListMerchantsRequest, v1.ListMerchantsResponse](
			httpClient,
			baseURL+CouponServiceListMerchantsProcedure,
			connect.WithSchema(couponServiceMethods.ByName("ListMerchants")),
			connect.WithClientOptions(opts...),
		),
		listPaymentChannels: connect.NewClient[v1.ListPaymentChannelsRequest, v1.ListPaymentChannelsResponse](
			httpClient,
			baseURL+CouponServiceListPaymentChannelsProcedure,
			connect.WithSchema(couponServiceMethods.ByName("ListPaymentChannels")),
			connect.WithClientOptions(opts...),
		),
	}
}

// couponServiceClient implements CouponServiceClient.
type couponServiceClient struct {
	getCoupon              *connect.Client[v1.GetCouponRequest, v1.GetCouponResponse]
	listCoupons            *connect.Client[v1.ListCouponsRequest, v1.ListCouponsResponse]
	createCoupon           *connect.Client[v1.CreateCouponRequest, v1.CreateCouponResponse]
	updateCoupon           *connect.Client[v1.UpdateCouponRequest, v1.UpdateCouponResponse]
	deleteCoupon           *connect.Client[v1.DeleteCouponRequest, v1.DeleteCouponResponse]
	claimCoupon            *connect.Client[v1.ClaimCouponRequest, v1.ClaimCouponResponse]
	reserveCoupon          *connect.Client[v1.ReserveCouponRequest, v1.ReserveCouponResponse]
	validateReservation    *connect.Client[v1.ValidateReservationRequest, v1.ValidateReservationResponse]
	listClaimCoupon        *connect.Client[v1.ListClaimCouponRequest, v1.ListClaimCouponResponse]
	calculateDiscount      *connect.Client[v1.CalculateDiscountRequest, v1.CalculateDiscountResponse]
	applyCoupon            *connect.Client[v1.ApplyCouponRequest, v1.ApplyCouponResponse]
	verifyCouponToken      *connect.Client[v1.VerifyCouponTokenRequest, v1.VerifyCouponTokenResponse]
	consumeCoupon          *connect.Client[v1.ConsumeCouponRequest, v1.ConsumeCouponResponse]
	triggerReconciliation  *connect.Client[v1.TriggerReconciliationRequest, v1.TriggerReconciliationResponse]
	reconcileCoupon        *connect.Client[v1.ReconcileCouponRequest, v1.ReconcileCouponResponse]
	getReconciliationStats *connect.Client[v1.GetReconciliationStatsRequest, v1.GetReconciliationStatsResponse]
	compensateUsage        *connect.Client[v1.CompensateUsageRequest, v1.CompensateUsageResponse]
	listMerchants          *connect.Client[v1.ListMerchantsRequest, v1.ListMerchantsResponse]
	listPaymentChannels    *connect.Client[v1.ListPaymentChannelsRequest, v1.ListPaymentChannelsResponse]
}

// GetCoupon calls coupon.CouponService.GetCoupon.
func (c *couponServiceClient) GetCoupon(ctx context.Context, req *connect.Request[v1.GetCouponRequest]) (*connect.Response[v1.GetCouponResponse], error) {
	return c.getCoupon.CallUnary(ctx, req)
}

// ListCoupons calls coupon.CouponService.ListCoupons.
func (c *couponServiceClient) ListCoupons(ctx context.Context, req *connect.Request[v1.ListCouponsRequest]) (*connect.Response[v1.ListCouponsResponse], error) {
	return c.listCoupons.CallUnary(ctx, req)
}

// CreateCoupon calls coupon.CouponService.CreateCoupon.
func (c *couponServiceClient) CreateCoupon(ctx context.Context, req *connect.Request[v1.CreateCouponRequest]) (*connect.Response[v1.CreateCouponResponse], error) {
	return c.createCoupon.CallUnary(ctx, req)
}

// UpdateCoupon calls coupon.CouponService.UpdateCoupon.
func (c *couponServiceClient) UpdateCoupon(ctx context.Context, req *connect.Request[v1.UpdateCouponRequest]) (*connect.Response[v1.UpdateCouponResponse], error) {
	return c.updateCoupon.CallUnary(ctx, req)
}

// DeleteCoupon calls coupon.CouponService.DeleteCoupon.
func (c *couponServiceClient) DeleteCoupon(ctx context.Context, req *connect.Request[v1.DeleteCouponRequest]) (*connect.Response[v1.DeleteCouponResponse], error) {
	return c.deleteCoupon.CallUnary(ctx, req)
}

// ClaimCoupon calls coupon.CouponService.ClaimCoupon.
func (c *couponServiceClient) ClaimCoupon(ctx context.Context, req *connect.Request[v1.ClaimCouponRequest]) (*connect.Response[v1.ClaimCouponResponse], error) {
	return c.claimCoupon.CallUnary(ctx, req)
}

// ReserveCoupon calls coupon.CouponService.ReserveCoupon.
func (c *couponServiceClient) ReserveCoupon(ctx context.Context, req *connect.Request[v1.ReserveCouponRequest]) (*connect.Response[v1.ReserveCouponResponse], error) {
	return c.reserveCoupon.CallUnary(ctx, req)
}

// ValidateReservation calls coupon.CouponService.ValidateReservation.
func (c *couponServiceClient) ValidateReservation(ctx context.Context, req *connect.Request[v1.ValidateReservationRequest]) (*connect.Response[v1.ValidateReservationResponse], error) {
	return c.validateReservation.CallUnary(ctx, req)
}

// ListClaimCoupon calls coupon.CouponService.ListClaimCoupon.
func (c *couponServiceClient) ListClaimCoupon(ctx context.Context, req *connect.Request[v1.ListClaimCouponRequest]) (*connect.Response[v1.ListClaimCouponResponse], error) {
	return c.listClaimCoupon.CallUnary(ctx, req)
}

// CalculateDiscount calls coupon.CouponService.CalculateDiscount.
func (c *couponServiceClient) CalculateDiscount(ctx context.Context, req *connect.Request[v1.CalculateDiscountRequest]) (*connect.Response[v1.CalculateDiscountResponse], error) {
	return c.calculateDiscount.CallUnary(ctx, req)
}

// ApplyCoupon calls coupon.CouponService.ApplyCoupon.
func (c *couponServiceClient) ApplyCoupon(ctx context.Context, req *connect.Request[v1.ApplyCouponRequest]) (*connect.Response[v1.ApplyCouponResponse], error) {
	return c.applyCoupon.CallUnary(ctx, req)
}

// VerifyCouponToken calls coupon.CouponService.VerifyCouponToken.
func (c *couponServiceClient) VerifyCouponToken(ctx context.Context, req *connect.Request[v1.VerifyCouponTokenRequest]) (*connect.Response[v1.VerifyCouponTokenResponse], error) {
	return c.verifyCouponToken.CallUnary(ctx, req)
}

// ConsumeCoupon calls coupon.CouponService.ConsumeCoupon.
func (c *couponServiceClient) ConsumeCoupon(ctx context.Context, req *connect.Request[v1.ConsumeCouponRequest]) (*connect.Response[v1.ConsumeCouponResponse], error) {
	return c.consumeCoupon.CallUnary(ctx, req)
}

// TriggerReconciliation calls coupon.CouponService.TriggerReconciliation.
func (c *couponServiceClient) TriggerReconciliation(ctx context.Context, req *connect.Request[v1.TriggerReconciliationRequest]) (*connect.Response[v1.TriggerReconciliationResponse], error) {
	return c.triggerReconciliation.CallUnary(ctx, req)
}

// ReconcileCoupon calls coupon.CouponService.ReconcileCoupon.
func (c *couponServiceClient) ReconcileCoupon(ctx context.Context, req *connect.Request[v1.ReconcileCouponRequest]) (*connect.Response[v1.ReconcileCouponResponse], error) {
	return c.reconcileCoupon.CallUnary(ctx, req)
}

// GetReconciliationStats calls coupon.CouponService.GetReconciliationStats.
func (c *couponServiceClient) GetReconciliationStats(ctx context.Context, req *connect.Request[v1.GetReconciliationStatsRequest]) (*connect.Response[v1.GetReconciliationStatsResponse], error) {
	return c.getReconciliationStats.CallUnary(ctx, req)
}

// CompensateUsage calls coupon.CouponService.CompensateUsage.
func (c *couponServiceClient) CompensateUsage(ctx context.Context, req *connect.Request[v1.CompensateUsageRequest]) (*connect.Response[v1.CompensateUsageResponse], error) {
	return c.compensateUsage.CallUnary(ctx, req)
}

// ListMerchants calls coupon.CouponService.ListMerchants.
func (c *couponServiceClient) ListMerchants(ctx context.Context, req *connect.Request[v1.ListMerchantsRequest]) (*connect.Response[v1.ListMerchantsResponse], error) {
	return c.listMerchants.CallUnary(ctx, req)
}

// ListPaymentChannels calls coupon.CouponService.ListPaymentChannels.
func (c *couponServiceClient) ListPaymentChannels(ctx context.Context, req *connect.Request[v1.ListPaymentChannelsRequest]) (*connect.Response[v1.ListPaymentChannelsResponse], error) {
	return c.listPaymentChannels.CallUnary(ctx, req)
}

// CouponServiceHandler is an implementation of the coupon.CouponService service.
type CouponServiceHandler interface {
	GetCoupon(context.Context, *connect.Request[v1.GetCouponRequest]) (*connect.Response[v1.GetCouponResponse], error)
	ListCoupons(context.Context, *connect.Request[v1.ListCouponsRequest]) (*connect.Response[v1.ListCouponsResponse], error)
	CreateCoupon(context.Context, *connect.Request[v1.CreateCouponRequest]) (*connect.Response[v1.CreateCouponResponse], error)
	UpdateCoupon(context.Context, *connect.Request[v1.UpdateCouponRequest]) (*connect.Response[v1.UpdateCouponResponse], error)
	DeleteCoupon(context.Context, *connect.Request[v1.DeleteCouponRequest]) (*connect.Response[v1.DeleteCouponResponse], error)
	ClaimCoupon(context.Context, *connect.Request[v1.ClaimCouponRequest]) (*connect.Response[v1.ClaimCouponResponse], error)
	ReserveCoupon(context.Context, *connect.Request[v1.ReserveCouponRequest]) (*connect.Response[v1.ReserveCouponResponse], error)
	ValidateReservation(context.Context, *connect.Request[v1.ValidateReservationRequest]) (*connect.Response[v1.ValidateReservationResponse], error)
	ListClaimCoupon(context.Context, *connect.Request[v1.ListClaimCouponRequest]) (*connect.Response[v1.ListClaimCouponResponse], error)
	CalculateDiscount(context.Context, *connect.Request[v1.CalculateDiscountRequest]) (*connect.Response[v1.CalculateDiscountResponse], error)
	// ApplyCoupon mints a shortâ€‘lived JWT coupon token after validating
	// policy (time window, min spend, merchant/payment constraints, etc.).
	// Use this for FE -> API -> coupon-service path to get {token, exp}.
	ApplyCoupon(context.Context, *connect.Request[v1.ApplyCouponRequest]) (*connect.Response[v1.ApplyCouponResponse], error)
	// VerifyCouponToken verifies RS256 token and returns parsed claims for
	// defense-in-depth checks by the caller. Optional for strong callers.
	VerifyCouponToken(context.Context, *connect.Request[v1.VerifyCouponTokenRequest]) (*connect.Response[v1.VerifyCouponTokenResponse], error)
	// ConsumeCoupon commits a coupon redemption idempotently. Caller passes
	// order_id, transaction_id, amount, and the JWT token. The service enforces
	// uniqueness by (transaction_id) and (coupon_id, user_id, order_id).
	ConsumeCoupon(context.Context, *connect.Request[v1.ConsumeCouponRequest]) (*connect.Response[v1.ConsumeCouponResponse], error)
	// Reconciliation endpoints for admin/monitoring purposes
	TriggerReconciliation(context.Context, *connect.Request[v1.TriggerReconciliationRequest]) (*connect.Response[v1.TriggerReconciliationResponse], error)
	ReconcileCoupon(context.Context, *connect.Request[v1.ReconcileCouponRequest]) (*connect.Response[v1.ReconcileCouponResponse], error)
	GetReconciliationStats(context.Context, *connect.Request[v1.GetReconciliationStatsRequest]) (*connect.Response[v1.GetReconciliationStatsResponse], error)
	CompensateUsage(context.Context, *connect.Request[v1.CompensateUsageRequest]) (*connect.Response[v1.CompensateUsageResponse], error)
	// Merchant and Payment Channel reference data
	ListMerchants(context.Context, *connect.Request[v1.ListMerchantsRequest]) (*connect.Response[v1.ListMerchantsResponse], error)
	ListPaymentChannels(context.Context, *connect.Request[v1.ListPaymentChannelsRequest]) (*connect.Response[v1.ListPaymentChannelsResponse], error)
}

// NewCouponServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCouponServiceHandler(svc CouponServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	couponServiceMethods := v1.File_coupon_v1_coupon_proto.Services().ByName("CouponService").Methods()
	couponServiceGetCouponHandler := connect.NewUnaryHandler(
		CouponServiceGetCouponProcedure,
		svc.GetCoupon,
		connect.WithSchema(couponServiceMethods.ByName("GetCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceListCouponsHandler := connect.NewUnaryHandler(
		CouponServiceListCouponsProcedure,
		svc.ListCoupons,
		connect.WithSchema(couponServiceMethods.ByName("ListCoupons")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceCreateCouponHandler := connect.NewUnaryHandler(
		CouponServiceCreateCouponProcedure,
		svc.CreateCoupon,
		connect.WithSchema(couponServiceMethods.ByName("CreateCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceUpdateCouponHandler := connect.NewUnaryHandler(
		CouponServiceUpdateCouponProcedure,
		svc.UpdateCoupon,
		connect.WithSchema(couponServiceMethods.ByName("UpdateCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceDeleteCouponHandler := connect.NewUnaryHandler(
		CouponServiceDeleteCouponProcedure,
		svc.DeleteCoupon,
		connect.WithSchema(couponServiceMethods.ByName("DeleteCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceClaimCouponHandler := connect.NewUnaryHandler(
		CouponServiceClaimCouponProcedure,
		svc.ClaimCoupon,
		connect.WithSchema(couponServiceMethods.ByName("ClaimCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceReserveCouponHandler := connect.NewUnaryHandler(
		CouponServiceReserveCouponProcedure,
		svc.ReserveCoupon,
		connect.WithSchema(couponServiceMethods.ByName("ReserveCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceValidateReservationHandler := connect.NewUnaryHandler(
		CouponServiceValidateReservationProcedure,
		svc.ValidateReservation,
		connect.WithSchema(couponServiceMethods.ByName("ValidateReservation")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceListClaimCouponHandler := connect.NewUnaryHandler(
		CouponServiceListClaimCouponProcedure,
		svc.ListClaimCoupon,
		connect.WithSchema(couponServiceMethods.ByName("ListClaimCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceCalculateDiscountHandler := connect.NewUnaryHandler(
		CouponServiceCalculateDiscountProcedure,
		svc.CalculateDiscount,
		connect.WithSchema(couponServiceMethods.ByName("CalculateDiscount")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceApplyCouponHandler := connect.NewUnaryHandler(
		CouponServiceApplyCouponProcedure,
		svc.ApplyCoupon,
		connect.WithSchema(couponServiceMethods.ByName("ApplyCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceVerifyCouponTokenHandler := connect.NewUnaryHandler(
		CouponServiceVerifyCouponTokenProcedure,
		svc.VerifyCouponToken,
		connect.WithSchema(couponServiceMethods.ByName("VerifyCouponToken")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceConsumeCouponHandler := connect.NewUnaryHandler(
		CouponServiceConsumeCouponProcedure,
		svc.ConsumeCoupon,
		connect.WithSchema(couponServiceMethods.ByName("ConsumeCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceTriggerReconciliationHandler := connect.NewUnaryHandler(
		CouponServiceTriggerReconciliationProcedure,
		svc.TriggerReconciliation,
		connect.WithSchema(couponServiceMethods.ByName("TriggerReconciliation")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceReconcileCouponHandler := connect.NewUnaryHandler(
		CouponServiceReconcileCouponProcedure,
		svc.ReconcileCoupon,
		connect.WithSchema(couponServiceMethods.ByName("ReconcileCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceGetReconciliationStatsHandler := connect.NewUnaryHandler(
		CouponServiceGetReconciliationStatsProcedure,
		svc.GetReconciliationStats,
		connect.WithSchema(couponServiceMethods.ByName("GetReconciliationStats")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceCompensateUsageHandler := connect.NewUnaryHandler(
		CouponServiceCompensateUsageProcedure,
		svc.CompensateUsage,
		connect.WithSchema(couponServiceMethods.ByName("CompensateUsage")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceListMerchantsHandler := connect.NewUnaryHandler(
		CouponServiceListMerchantsProcedure,
		svc.ListMerchants,
		connect.WithSchema(couponServiceMethods.ByName("ListMerchants")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceListPaymentChannelsHandler := connect.NewUnaryHandler(
		CouponServiceListPaymentChannelsProcedure,
		svc.ListPaymentChannels,
		connect.WithSchema(couponServiceMethods.ByName("ListPaymentChannels")),
		connect.WithHandlerOptions(opts...),
	)
	return "/coupon.CouponService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CouponServiceGetCouponProcedure:
			couponServiceGetCouponHandler.ServeHTTP(w, r)
		case CouponServiceListCouponsProcedure:
			couponServiceListCouponsHandler.ServeHTTP(w, r)
		case CouponServiceCreateCouponProcedure:
			couponServiceCreateCouponHandler.ServeHTTP(w, r)
		case CouponServiceUpdateCouponProcedure:
			couponServiceUpdateCouponHandler.ServeHTTP(w, r)
		case CouponServiceDeleteCouponProcedure:
			couponServiceDeleteCouponHandler.ServeHTTP(w, r)
		case CouponServiceClaimCouponProcedure:
			couponServiceClaimCouponHandler.ServeHTTP(w, r)
		case CouponServiceReserveCouponProcedure:
			couponServiceReserveCouponHandler.ServeHTTP(w, r)
		case CouponServiceValidateReservationProcedure:
			couponServiceValidateReservationHandler.ServeHTTP(w, r)
		case CouponServiceListClaimCouponProcedure:
			couponServiceListClaimCouponHandler.ServeHTTP(w, r)
		case CouponServiceCalculateDiscountProcedure:
			couponServiceCalculateDiscountHandler.ServeHTTP(w, r)
		case CouponServiceApplyCouponProcedure:
			couponServiceApplyCouponHandler.ServeHTTP(w, r)
		case CouponServiceVerifyCouponTokenProcedure:
			couponServiceVerifyCouponTokenHandler.ServeHTTP(w, r)
		case CouponServiceConsumeCouponProcedure:
			couponServiceConsumeCouponHandler.ServeHTTP(w, r)
		case CouponServiceTriggerReconciliationProcedure:
			couponServiceTriggerReconciliationHandler.ServeHTTP(w, r)
		case CouponServiceReconcileCouponProcedure:
			couponServiceReconcileCouponHandler.ServeHTTP(w, r)
		case CouponServiceGetReconciliationStatsProcedure:
			couponServiceGetReconciliationStatsHandler.ServeHTTP(w, r)
		case CouponServiceCompensateUsageProcedure:
			couponServiceCompensateUsageHandler.ServeHTTP(w, r)
		case CouponServiceListMerchantsProcedure:
			couponServiceListMerchantsHandler.ServeHTTP(w, r)
		case CouponServiceListPaymentChannelsProcedure:
			couponServiceListPaymentChannelsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCouponServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCouponServiceHandler struct{}

func (UnimplementedCouponServiceHandler) GetCoupon(context.Context, *connect.Request[v1.GetCouponRequest]) (*connect.Response[v1.GetCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.GetCoupon is not implemented"))
}

func (UnimplementedCouponServiceHandler) ListCoupons(context.Context, *connect.Request[v1.ListCouponsRequest]) (*connect.Response[v1.ListCouponsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.ListCoupons is not implemented"))
}

func (UnimplementedCouponServiceHandler) CreateCoupon(context.Context, *connect.Request[v1.CreateCouponRequest]) (*connect.Response[v1.CreateCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.CreateCoupon is not implemented"))
}

func (UnimplementedCouponServiceHandler) UpdateCoupon(context.Context, *connect.Request[v1.UpdateCouponRequest]) (*connect.Response[v1.UpdateCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.UpdateCoupon is not implemented"))
}

func (UnimplementedCouponServiceHandler) DeleteCoupon(context.Context, *connect.Request[v1.DeleteCouponRequest]) (*connect.Response[v1.DeleteCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.DeleteCoupon is not implemented"))
}

func (UnimplementedCouponServiceHandler) ClaimCoupon(context.Context, *connect.Request[v1.ClaimCouponRequest]) (*connect.Response[v1.ClaimCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.ClaimCoupon is not implemented"))
}

func (UnimplementedCouponServiceHandler) ReserveCoupon(context.Context, *connect.Request[v1.ReserveCouponRequest]) (*connect.Response[v1.ReserveCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.ReserveCoupon is not implemented"))
}

func (UnimplementedCouponServiceHandler) ValidateReservation(context.Context, *connect.Request[v1.ValidateReservationRequest]) (*connect.Response[v1.ValidateReservationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.ValidateReservation is not implemented"))
}

func (UnimplementedCouponServiceHandler) ListClaimCoupon(context.Context, *connect.Request[v1.ListClaimCouponRequest]) (*connect.Response[v1.ListClaimCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.ListClaimCoupon is not implemented"))
}

func (UnimplementedCouponServiceHandler) CalculateDiscount(context.Context, *connect.Request[v1.CalculateDiscountRequest]) (*connect.Response[v1.CalculateDiscountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.CalculateDiscount is not implemented"))
}

func (UnimplementedCouponServiceHandler) ApplyCoupon(context.Context, *connect.Request[v1.ApplyCouponRequest]) (*connect.Response[v1.ApplyCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.ApplyCoupon is not implemented"))
}

func (UnimplementedCouponServiceHandler) VerifyCouponToken(context.Context, *connect.Request[v1.VerifyCouponTokenRequest]) (*connect.Response[v1.VerifyCouponTokenResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.VerifyCouponToken is not implemented"))
}

func (UnimplementedCouponServiceHandler) ConsumeCoupon(context.Context, *connect.Request[v1.ConsumeCouponRequest]) (*connect.Response[v1.ConsumeCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.ConsumeCoupon is not implemented"))
}

func (UnimplementedCouponServiceHandler) TriggerReconciliation(context.Context, *connect.Request[v1.TriggerReconciliationRequest]) (*connect.Response[v1.TriggerReconciliationResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.TriggerReconciliation is not implemented"))
}

func (UnimplementedCouponServiceHandler) ReconcileCoupon(context.Context, *connect.Request[v1.ReconcileCouponRequest]) (*connect.Response[v1.ReconcileCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.ReconcileCoupon is not implemented"))
}

func (UnimplementedCouponServiceHandler) GetReconciliationStats(context.Context, *connect.Request[v1.GetReconciliationStatsRequest]) (*connect.Response[v1.GetReconciliationStatsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.GetReconciliationStats is not implemented"))
}

func (UnimplementedCouponServiceHandler) CompensateUsage(context.Context, *connect.Request[v1.CompensateUsageRequest]) (*connect.Response[v1.CompensateUsageResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.CompensateUsage is not implemented"))
}

func (UnimplementedCouponServiceHandler) ListMerchants(context.Context, *connect.Request[v1.ListMerchantsRequest]) (*connect.Response[v1.ListMerchantsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.ListMerchants is not implemented"))
}

func (UnimplementedCouponServiceHandler) ListPaymentChannels(context.Context, *connect.Request[v1.ListPaymentChannelsRequest]) (*connect.Response[v1.ListPaymentChannelsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.ListPaymentChannels is not implemented"))
}
