// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: coupon/v1/coupon.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/loingtan/proto/gen/coupon/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CouponServiceName is the fully-qualified name of the CouponService service.
	CouponServiceName = "coupon.CouponService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CouponServiceGetCouponProcedure is the fully-qualified name of the CouponService's GetCoupon RPC.
	CouponServiceGetCouponProcedure = "/coupon.CouponService/GetCoupon"
	// CouponServiceListCouponsProcedure is the fully-qualified name of the CouponService's ListCoupons
	// RPC.
	CouponServiceListCouponsProcedure = "/coupon.CouponService/ListCoupons"
	// CouponServiceCreateCouponProcedure is the fully-qualified name of the CouponService's
	// CreateCoupon RPC.
	CouponServiceCreateCouponProcedure = "/coupon.CouponService/CreateCoupon"
	// CouponServiceUpdateCouponProcedure is the fully-qualified name of the CouponService's
	// UpdateCoupon RPC.
	CouponServiceUpdateCouponProcedure = "/coupon.CouponService/UpdateCoupon"
	// CouponServiceDeleteCouponProcedure is the fully-qualified name of the CouponService's
	// DeleteCoupon RPC.
	CouponServiceDeleteCouponProcedure = "/coupon.CouponService/DeleteCoupon"
	// CouponServiceReserveCouponProcedure is the fully-qualified name of the CouponService's
	// ReserveCoupon RPC.
	CouponServiceReserveCouponProcedure = "/coupon.CouponService/ReserveCoupon"
	// CouponServiceListClaimCouponProcedure is the fully-qualified name of the CouponService's
	// ListClaimCoupon RPC.
	CouponServiceListClaimCouponProcedure = "/coupon.CouponService/ListClaimCoupon"
	// CouponServiceCalculateDiscountProcedure is the fully-qualified name of the CouponService's
	// CalculateDiscount RPC.
	CouponServiceCalculateDiscountProcedure = "/coupon.CouponService/CalculateDiscount"
)

// CouponServiceClient is a client for the coupon.CouponService service.
type CouponServiceClient interface {
	GetCoupon(context.Context, *connect.Request[v1.GetCouponRequest]) (*connect.Response[v1.GetCouponResponse], error)
	ListCoupons(context.Context, *connect.Request[v1.ListCouponsRequest]) (*connect.Response[v1.ListCouponsResponse], error)
	CreateCoupon(context.Context, *connect.Request[v1.CreateCouponRequest]) (*connect.Response[v1.CreateCouponResponse], error)
	UpdateCoupon(context.Context, *connect.Request[v1.UpdateCouponRequest]) (*connect.Response[v1.UpdateCouponResponse], error)
	DeleteCoupon(context.Context, *connect.Request[v1.DeleteCouponRequest]) (*connect.Response[v1.DeleteCouponResponse], error)
	ReserveCoupon(context.Context, *connect.Request[v1.ReserveCouponRequest]) (*connect.Response[v1.ReserveCouponResponse], error)
	ListClaimCoupon(context.Context, *connect.Request[v1.ListClaimCouponRequest]) (*connect.Response[v1.ListClaimCouponResponse], error)
	CalculateDiscount(context.Context, *connect.Request[v1.CalculateDiscountRequest]) (*connect.Response[v1.CalculateDiscountResponse], error)
}

// NewCouponServiceClient constructs a client for the coupon.CouponService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCouponServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CouponServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	couponServiceMethods := v1.File_coupon_v1_coupon_proto.Services().ByName("CouponService").Methods()
	return &couponServiceClient{
		getCoupon: connect.NewClient[v1.GetCouponRequest, v1.GetCouponResponse](
			httpClient,
			baseURL+CouponServiceGetCouponProcedure,
			connect.WithSchema(couponServiceMethods.ByName("GetCoupon")),
			connect.WithClientOptions(opts...),
		),
		listCoupons: connect.NewClient[v1.ListCouponsRequest, v1.ListCouponsResponse](
			httpClient,
			baseURL+CouponServiceListCouponsProcedure,
			connect.WithSchema(couponServiceMethods.ByName("ListCoupons")),
			connect.WithClientOptions(opts...),
		),
		createCoupon: connect.NewClient[v1.CreateCouponRequest, v1.CreateCouponResponse](
			httpClient,
			baseURL+CouponServiceCreateCouponProcedure,
			connect.WithSchema(couponServiceMethods.ByName("CreateCoupon")),
			connect.WithClientOptions(opts...),
		),
		updateCoupon: connect.NewClient[v1.UpdateCouponRequest, v1.UpdateCouponResponse](
			httpClient,
			baseURL+CouponServiceUpdateCouponProcedure,
			connect.WithSchema(couponServiceMethods.ByName("UpdateCoupon")),
			connect.WithClientOptions(opts...),
		),
		deleteCoupon: connect.NewClient[v1.DeleteCouponRequest, v1.DeleteCouponResponse](
			httpClient,
			baseURL+CouponServiceDeleteCouponProcedure,
			connect.WithSchema(couponServiceMethods.ByName("DeleteCoupon")),
			connect.WithClientOptions(opts...),
		),
		reserveCoupon: connect.NewClient[v1.ReserveCouponRequest, v1.ReserveCouponResponse](
			httpClient,
			baseURL+CouponServiceReserveCouponProcedure,
			connect.WithSchema(couponServiceMethods.ByName("ReserveCoupon")),
			connect.WithClientOptions(opts...),
		),
		listClaimCoupon: connect.NewClient[v1.ListClaimCouponRequest, v1.ListClaimCouponResponse](
			httpClient,
			baseURL+CouponServiceListClaimCouponProcedure,
			connect.WithSchema(couponServiceMethods.ByName("ListClaimCoupon")),
			connect.WithClientOptions(opts...),
		),
		calculateDiscount: connect.NewClient[v1.CalculateDiscountRequest, v1.CalculateDiscountResponse](
			httpClient,
			baseURL+CouponServiceCalculateDiscountProcedure,
			connect.WithSchema(couponServiceMethods.ByName("CalculateDiscount")),
			connect.WithClientOptions(opts...),
		),
	}
}

// couponServiceClient implements CouponServiceClient.
type couponServiceClient struct {
	getCoupon         *connect.Client[v1.GetCouponRequest, v1.GetCouponResponse]
	listCoupons       *connect.Client[v1.ListCouponsRequest, v1.ListCouponsResponse]
	createCoupon      *connect.Client[v1.CreateCouponRequest, v1.CreateCouponResponse]
	updateCoupon      *connect.Client[v1.UpdateCouponRequest, v1.UpdateCouponResponse]
	deleteCoupon      *connect.Client[v1.DeleteCouponRequest, v1.DeleteCouponResponse]
	reserveCoupon     *connect.Client[v1.ReserveCouponRequest, v1.ReserveCouponResponse]
	listClaimCoupon   *connect.Client[v1.ListClaimCouponRequest, v1.ListClaimCouponResponse]
	calculateDiscount *connect.Client[v1.CalculateDiscountRequest, v1.CalculateDiscountResponse]
}

// GetCoupon calls coupon.CouponService.GetCoupon.
func (c *couponServiceClient) GetCoupon(ctx context.Context, req *connect.Request[v1.GetCouponRequest]) (*connect.Response[v1.GetCouponResponse], error) {
	return c.getCoupon.CallUnary(ctx, req)
}

// ListCoupons calls coupon.CouponService.ListCoupons.
func (c *couponServiceClient) ListCoupons(ctx context.Context, req *connect.Request[v1.ListCouponsRequest]) (*connect.Response[v1.ListCouponsResponse], error) {
	return c.listCoupons.CallUnary(ctx, req)
}

// CreateCoupon calls coupon.CouponService.CreateCoupon.
func (c *couponServiceClient) CreateCoupon(ctx context.Context, req *connect.Request[v1.CreateCouponRequest]) (*connect.Response[v1.CreateCouponResponse], error) {
	return c.createCoupon.CallUnary(ctx, req)
}

// UpdateCoupon calls coupon.CouponService.UpdateCoupon.
func (c *couponServiceClient) UpdateCoupon(ctx context.Context, req *connect.Request[v1.UpdateCouponRequest]) (*connect.Response[v1.UpdateCouponResponse], error) {
	return c.updateCoupon.CallUnary(ctx, req)
}

// DeleteCoupon calls coupon.CouponService.DeleteCoupon.
func (c *couponServiceClient) DeleteCoupon(ctx context.Context, req *connect.Request[v1.DeleteCouponRequest]) (*connect.Response[v1.DeleteCouponResponse], error) {
	return c.deleteCoupon.CallUnary(ctx, req)
}

// ReserveCoupon calls coupon.CouponService.ReserveCoupon.
func (c *couponServiceClient) ReserveCoupon(ctx context.Context, req *connect.Request[v1.ReserveCouponRequest]) (*connect.Response[v1.ReserveCouponResponse], error) {
	return c.reserveCoupon.CallUnary(ctx, req)
}

// ListClaimCoupon calls coupon.CouponService.ListClaimCoupon.
func (c *couponServiceClient) ListClaimCoupon(ctx context.Context, req *connect.Request[v1.ListClaimCouponRequest]) (*connect.Response[v1.ListClaimCouponResponse], error) {
	return c.listClaimCoupon.CallUnary(ctx, req)
}

// CalculateDiscount calls coupon.CouponService.CalculateDiscount.
func (c *couponServiceClient) CalculateDiscount(ctx context.Context, req *connect.Request[v1.CalculateDiscountRequest]) (*connect.Response[v1.CalculateDiscountResponse], error) {
	return c.calculateDiscount.CallUnary(ctx, req)
}

// CouponServiceHandler is an implementation of the coupon.CouponService service.
type CouponServiceHandler interface {
	GetCoupon(context.Context, *connect.Request[v1.GetCouponRequest]) (*connect.Response[v1.GetCouponResponse], error)
	ListCoupons(context.Context, *connect.Request[v1.ListCouponsRequest]) (*connect.Response[v1.ListCouponsResponse], error)
	CreateCoupon(context.Context, *connect.Request[v1.CreateCouponRequest]) (*connect.Response[v1.CreateCouponResponse], error)
	UpdateCoupon(context.Context, *connect.Request[v1.UpdateCouponRequest]) (*connect.Response[v1.UpdateCouponResponse], error)
	DeleteCoupon(context.Context, *connect.Request[v1.DeleteCouponRequest]) (*connect.Response[v1.DeleteCouponResponse], error)
	ReserveCoupon(context.Context, *connect.Request[v1.ReserveCouponRequest]) (*connect.Response[v1.ReserveCouponResponse], error)
	ListClaimCoupon(context.Context, *connect.Request[v1.ListClaimCouponRequest]) (*connect.Response[v1.ListClaimCouponResponse], error)
	CalculateDiscount(context.Context, *connect.Request[v1.CalculateDiscountRequest]) (*connect.Response[v1.CalculateDiscountResponse], error)
}

// NewCouponServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCouponServiceHandler(svc CouponServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	couponServiceMethods := v1.File_coupon_v1_coupon_proto.Services().ByName("CouponService").Methods()
	couponServiceGetCouponHandler := connect.NewUnaryHandler(
		CouponServiceGetCouponProcedure,
		svc.GetCoupon,
		connect.WithSchema(couponServiceMethods.ByName("GetCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceListCouponsHandler := connect.NewUnaryHandler(
		CouponServiceListCouponsProcedure,
		svc.ListCoupons,
		connect.WithSchema(couponServiceMethods.ByName("ListCoupons")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceCreateCouponHandler := connect.NewUnaryHandler(
		CouponServiceCreateCouponProcedure,
		svc.CreateCoupon,
		connect.WithSchema(couponServiceMethods.ByName("CreateCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceUpdateCouponHandler := connect.NewUnaryHandler(
		CouponServiceUpdateCouponProcedure,
		svc.UpdateCoupon,
		connect.WithSchema(couponServiceMethods.ByName("UpdateCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceDeleteCouponHandler := connect.NewUnaryHandler(
		CouponServiceDeleteCouponProcedure,
		svc.DeleteCoupon,
		connect.WithSchema(couponServiceMethods.ByName("DeleteCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceReserveCouponHandler := connect.NewUnaryHandler(
		CouponServiceReserveCouponProcedure,
		svc.ReserveCoupon,
		connect.WithSchema(couponServiceMethods.ByName("ReserveCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceListClaimCouponHandler := connect.NewUnaryHandler(
		CouponServiceListClaimCouponProcedure,
		svc.ListClaimCoupon,
		connect.WithSchema(couponServiceMethods.ByName("ListClaimCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	couponServiceCalculateDiscountHandler := connect.NewUnaryHandler(
		CouponServiceCalculateDiscountProcedure,
		svc.CalculateDiscount,
		connect.WithSchema(couponServiceMethods.ByName("CalculateDiscount")),
		connect.WithHandlerOptions(opts...),
	)
	return "/coupon.CouponService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CouponServiceGetCouponProcedure:
			couponServiceGetCouponHandler.ServeHTTP(w, r)
		case CouponServiceListCouponsProcedure:
			couponServiceListCouponsHandler.ServeHTTP(w, r)
		case CouponServiceCreateCouponProcedure:
			couponServiceCreateCouponHandler.ServeHTTP(w, r)
		case CouponServiceUpdateCouponProcedure:
			couponServiceUpdateCouponHandler.ServeHTTP(w, r)
		case CouponServiceDeleteCouponProcedure:
			couponServiceDeleteCouponHandler.ServeHTTP(w, r)
		case CouponServiceReserveCouponProcedure:
			couponServiceReserveCouponHandler.ServeHTTP(w, r)
		case CouponServiceListClaimCouponProcedure:
			couponServiceListClaimCouponHandler.ServeHTTP(w, r)
		case CouponServiceCalculateDiscountProcedure:
			couponServiceCalculateDiscountHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCouponServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCouponServiceHandler struct{}

func (UnimplementedCouponServiceHandler) GetCoupon(context.Context, *connect.Request[v1.GetCouponRequest]) (*connect.Response[v1.GetCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.GetCoupon is not implemented"))
}

func (UnimplementedCouponServiceHandler) ListCoupons(context.Context, *connect.Request[v1.ListCouponsRequest]) (*connect.Response[v1.ListCouponsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.ListCoupons is not implemented"))
}

func (UnimplementedCouponServiceHandler) CreateCoupon(context.Context, *connect.Request[v1.CreateCouponRequest]) (*connect.Response[v1.CreateCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.CreateCoupon is not implemented"))
}

func (UnimplementedCouponServiceHandler) UpdateCoupon(context.Context, *connect.Request[v1.UpdateCouponRequest]) (*connect.Response[v1.UpdateCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.UpdateCoupon is not implemented"))
}

func (UnimplementedCouponServiceHandler) DeleteCoupon(context.Context, *connect.Request[v1.DeleteCouponRequest]) (*connect.Response[v1.DeleteCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.DeleteCoupon is not implemented"))
}

func (UnimplementedCouponServiceHandler) ReserveCoupon(context.Context, *connect.Request[v1.ReserveCouponRequest]) (*connect.Response[v1.ReserveCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.ReserveCoupon is not implemented"))
}

func (UnimplementedCouponServiceHandler) ListClaimCoupon(context.Context, *connect.Request[v1.ListClaimCouponRequest]) (*connect.Response[v1.ListClaimCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.ListClaimCoupon is not implemented"))
}

func (UnimplementedCouponServiceHandler) CalculateDiscount(context.Context, *connect.Request[v1.CalculateDiscountRequest]) (*connect.Response[v1.CalculateDiscountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("coupon.CouponService.CalculateDiscount is not implemented"))
}
