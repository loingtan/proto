// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: order/v1/order.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _order_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderRequestMultiError, or nil if none found.
func (m *CreateOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = CreateOrderRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetCouponId()); err != nil {
		err = CreateOrderRequestValidationError{
			field:  "CouponId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := CreateOrderRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDiscount() < 0 {
		err := CreateOrderRequestValidationError{
			field:  "Discount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _CreateOrderRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := CreateOrderRequestValidationError{
			field:  "Status",
			reason: "value must be in list [PENDING CONFIRMED PROCESSING SHIPPED DELIVERED CANCELLED REFUNDED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateOrderRequestMultiError(errors)
	}

	return nil
}

func (m *CreateOrderRequest) _validateUuid(uuid string) error {
	if matched := _order_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// CreateOrderRequestMultiError is an error wrapping multiple validation errors
// returned by CreateOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderRequestMultiError) AllErrors() []error { return m }

// CreateOrderRequestValidationError is the validation error returned by
// CreateOrderRequest.Validate if the designated constraints aren't met.
type CreateOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderRequestValidationError) ErrorName() string {
	return "CreateOrderRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderRequestValidationError{}

var _CreateOrderRequest_Status_InLookup = map[string]struct{}{
	"PENDING":    {},
	"CONFIRMED":  {},
	"PROCESSING": {},
	"SHIPPED":    {},
	"DELIVERED":  {},
	"CANCELLED":  {},
	"REFUNDED":   {},
}

// Validate checks the field values on CreateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrderResponseMultiError, or nil if none found.
func (m *CreateOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrderResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrderResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrderResponseValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	if len(errors) > 0 {
		return CreateOrderResponseMultiError(errors)
	}

	return nil
}

// CreateOrderResponseMultiError is an error wrapping multiple validation
// errors returned by CreateOrderResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrderResponseMultiError) AllErrors() []error { return m }

// CreateOrderResponseValidationError is the validation error returned by
// CreateOrderResponse.Validate if the designated constraints aren't met.
type CreateOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrderResponseValidationError) ErrorName() string {
	return "CreateOrderResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrderResponseValidationError{}

// Validate checks the field values on GetOrderRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrderRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderRequestMultiError, or nil if none found.
func (m *GetOrderRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = GetOrderRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetOrderRequestMultiError(errors)
	}

	return nil
}

func (m *GetOrderRequest) _validateUuid(uuid string) error {
	if matched := _order_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetOrderRequestMultiError is an error wrapping multiple validation errors
// returned by GetOrderRequest.ValidateAll() if the designated constraints
// aren't met.
type GetOrderRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderRequestMultiError) AllErrors() []error { return m }

// GetOrderRequestValidationError is the validation error returned by
// GetOrderRequest.Validate if the designated constraints aren't met.
type GetOrderRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderRequestValidationError) ErrorName() string { return "GetOrderRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderRequestValidationError{}

// Validate checks the field values on GetOrderResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetOrderResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrderResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrderResponseMultiError, or nil if none found.
func (m *GetOrderResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrderResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrderResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrderResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrderResponseValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	if len(errors) > 0 {
		return GetOrderResponseMultiError(errors)
	}

	return nil
}

// GetOrderResponseMultiError is an error wrapping multiple validation errors
// returned by GetOrderResponse.ValidateAll() if the designated constraints
// aren't met.
type GetOrderResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrderResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrderResponseMultiError) AllErrors() []error { return m }

// GetOrderResponseValidationError is the validation error returned by
// GetOrderResponse.Validate if the designated constraints aren't met.
type GetOrderResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrderResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrderResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrderResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrderResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrderResponseValidationError) ErrorName() string { return "GetOrderResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetOrderResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrderResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrderResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrderResponseValidationError{}

// Validate checks the field values on ListOrdersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrdersRequestMultiError, or nil if none found.
func (m *ListOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if val := m.GetPage(); val < 1 || val > 1000 {
		err := ListOrdersRequestValidationError{
			field:  "Page",
			reason: "value must be inside range [1, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := ListOrdersRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFilter()) > 100 {
		err := ListOrdersRequestValidationError{
			field:  "Filter",
			reason: "value length must be at most 100 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListOrdersRequestMultiError(errors)
	}

	return nil
}

// ListOrdersRequestMultiError is an error wrapping multiple validation errors
// returned by ListOrdersRequest.ValidateAll() if the designated constraints
// aren't met.
type ListOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrdersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrdersRequestMultiError) AllErrors() []error { return m }

// ListOrdersRequestValidationError is the validation error returned by
// ListOrdersRequest.Validate if the designated constraints aren't met.
type ListOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersRequestValidationError) ErrorName() string {
	return "ListOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersRequestValidationError{}

// Validate checks the field values on ListOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrdersResponseMultiError, or nil if none found.
func (m *ListOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrdersResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Error

	if len(errors) > 0 {
		return ListOrdersResponseMultiError(errors)
	}

	return nil
}

// ListOrdersResponseMultiError is an error wrapping multiple validation errors
// returned by ListOrdersResponse.ValidateAll() if the designated constraints
// aren't met.
type ListOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrdersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrdersResponseMultiError) AllErrors() []error { return m }

// ListOrdersResponseValidationError is the validation error returned by
// ListOrdersResponse.Validate if the designated constraints aren't met.
type ListOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrdersResponseValidationError) ErrorName() string {
	return "ListOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrdersResponseValidationError{}

// Validate checks the field values on UpdateOrderStatusRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderStatusRequestMultiError, or nil if none found.
func (m *UpdateOrderStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateOrderStatusRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _UpdateOrderStatusRequest_Status_InLookup[m.GetStatus()]; !ok {
		err := UpdateOrderStatusRequestValidationError{
			field:  "Status",
			reason: "value must be in list [PENDING CONFIRMED PROCESSING SHIPPED DELIVERED CANCELLED REFUNDED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpdateOrderStatusRequestMultiError(errors)
	}

	return nil
}

func (m *UpdateOrderStatusRequest) _validateUuid(uuid string) error {
	if matched := _order_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateOrderStatusRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderStatusRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateOrderStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderStatusRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderStatusRequestMultiError) AllErrors() []error { return m }

// UpdateOrderStatusRequestValidationError is the validation error returned by
// UpdateOrderStatusRequest.Validate if the designated constraints aren't met.
type UpdateOrderStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderStatusRequestValidationError) ErrorName() string {
	return "UpdateOrderStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderStatusRequestValidationError{}

var _UpdateOrderStatusRequest_Status_InLookup = map[string]struct{}{
	"PENDING":    {},
	"CONFIRMED":  {},
	"PROCESSING": {},
	"SHIPPED":    {},
	"DELIVERED":  {},
	"CANCELLED":  {},
	"REFUNDED":   {},
}

// Validate checks the field values on UpdateOrderStatusResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrderStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrderStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrderStatusResponseMultiError, or nil if none found.
func (m *UpdateOrderStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrderStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrder()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrderStatusResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrderStatusResponseValidationError{
					field:  "Order",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrder()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrderStatusResponseValidationError{
				field:  "Order",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Error

	if len(errors) > 0 {
		return UpdateOrderStatusResponseMultiError(errors)
	}

	return nil
}

// UpdateOrderStatusResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateOrderStatusResponse.ValidateAll() if the
// designated constraints aren't met.
type UpdateOrderStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrderStatusResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrderStatusResponseMultiError) AllErrors() []error { return m }

// UpdateOrderStatusResponseValidationError is the validation error returned by
// UpdateOrderStatusResponse.Validate if the designated constraints aren't met.
type UpdateOrderStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrderStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrderStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrderStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrderStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrderStatusResponseValidationError) ErrorName() string {
	return "UpdateOrderStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrderStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrderStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrderStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrderStatusResponseValidationError{}

// Validate checks the field values on GetUserOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserOrdersRequestMultiError, or nil if none found.
func (m *GetUserOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = GetUserOrdersRequestValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPage(); val < 1 || val > 1000 {
		err := GetUserOrdersRequestValidationError{
			field:  "Page",
			reason: "value must be inside range [1, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := GetUserOrdersRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserOrdersRequestMultiError(errors)
	}

	return nil
}

func (m *GetUserOrdersRequest) _validateUuid(uuid string) error {
	if matched := _order_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetUserOrdersRequestMultiError is an error wrapping multiple validation
// errors returned by GetUserOrdersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetUserOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOrdersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOrdersRequestMultiError) AllErrors() []error { return m }

// GetUserOrdersRequestValidationError is the validation error returned by
// GetUserOrdersRequest.Validate if the designated constraints aren't met.
type GetUserOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOrdersRequestValidationError) ErrorName() string {
	return "GetUserOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOrdersRequestValidationError{}

// Validate checks the field values on GetUserOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetUserOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserOrdersResponseMultiError, or nil if none found.
func (m *GetUserOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetUserOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetUserOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetUserOrdersResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Error

	if len(errors) > 0 {
		return GetUserOrdersResponseMultiError(errors)
	}

	return nil
}

// GetUserOrdersResponseMultiError is an error wrapping multiple validation
// errors returned by GetUserOrdersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetUserOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserOrdersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserOrdersResponseMultiError) AllErrors() []error { return m }

// GetUserOrdersResponseValidationError is the validation error returned by
// GetUserOrdersResponse.Validate if the designated constraints aren't met.
type GetUserOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserOrdersResponseValidationError) ErrorName() string {
	return "GetUserOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetUserOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserOrdersResponseValidationError{}

// Validate checks the field values on GetCouponOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCouponOrdersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouponOrdersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouponOrdersRequestMultiError, or nil if none found.
func (m *GetCouponOrdersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouponOrdersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetCouponId()); err != nil {
		err = GetCouponOrdersRequestValidationError{
			field:  "CouponId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPage(); val < 1 || val > 1000 {
		err := GetCouponOrdersRequestValidationError{
			field:  "Page",
			reason: "value must be inside range [1, 1000]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if val := m.GetPageSize(); val < 1 || val > 100 {
		err := GetCouponOrdersRequestValidationError{
			field:  "PageSize",
			reason: "value must be inside range [1, 100]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetCouponOrdersRequestMultiError(errors)
	}

	return nil
}

func (m *GetCouponOrdersRequest) _validateUuid(uuid string) error {
	if matched := _order_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// GetCouponOrdersRequestMultiError is an error wrapping multiple validation
// errors returned by GetCouponOrdersRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCouponOrdersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouponOrdersRequestMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouponOrdersRequestMultiError) AllErrors() []error { return m }

// GetCouponOrdersRequestValidationError is the validation error returned by
// GetCouponOrdersRequest.Validate if the designated constraints aren't met.
type GetCouponOrdersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouponOrdersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouponOrdersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouponOrdersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouponOrdersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouponOrdersRequestValidationError) ErrorName() string {
	return "GetCouponOrdersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCouponOrdersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouponOrdersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouponOrdersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouponOrdersRequestValidationError{}

// Validate checks the field values on GetCouponOrdersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCouponOrdersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCouponOrdersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCouponOrdersResponseMultiError, or nil if none found.
func (m *GetCouponOrdersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCouponOrdersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrders() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetCouponOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetCouponOrdersResponseValidationError{
						field:  fmt.Sprintf("Orders[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetCouponOrdersResponseValidationError{
					field:  fmt.Sprintf("Orders[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Error

	if len(errors) > 0 {
		return GetCouponOrdersResponseMultiError(errors)
	}

	return nil
}

// GetCouponOrdersResponseMultiError is an error wrapping multiple validation
// errors returned by GetCouponOrdersResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCouponOrdersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCouponOrdersResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCouponOrdersResponseMultiError) AllErrors() []error { return m }

// GetCouponOrdersResponseValidationError is the validation error returned by
// GetCouponOrdersResponse.Validate if the designated constraints aren't met.
type GetCouponOrdersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCouponOrdersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCouponOrdersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCouponOrdersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCouponOrdersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCouponOrdersResponseValidationError) ErrorName() string {
	return "GetCouponOrdersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCouponOrdersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCouponOrdersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCouponOrdersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCouponOrdersResponseValidationError{}

// Validate checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Order) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Order with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in OrderMultiError, or nil if none found.
func (m *Order) ValidateAll() error {
	return m.validate(true)
}

func (m *Order) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = OrderValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetUserId()); err != nil {
		err = OrderValidationError{
			field:  "UserId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateUuid(m.GetCouponId()); err != nil {
		err = OrderValidationError{
			field:  "CouponId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := OrderValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDiscount() < 0 {
		err := OrderValidationError{
			field:  "Discount",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _Order_Status_InLookup[m.GetStatus()]; !ok {
		err := OrderValidationError{
			field:  "Status",
			reason: "value must be in list [PENDING CONFIRMED PROCESSING SHIPPED DELIVERED CANCELLED REFUNDED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrderValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrderValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrderMultiError(errors)
	}

	return nil
}

func (m *Order) _validateUuid(uuid string) error {
	if matched := _order_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// OrderMultiError is an error wrapping multiple validation errors returned by
// Order.ValidateAll() if the designated constraints aren't met.
type OrderMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrderMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrderMultiError) AllErrors() []error { return m }

// OrderValidationError is the validation error returned by Order.Validate if
// the designated constraints aren't met.
type OrderValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrderValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrderValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrderValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrderValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrderValidationError) ErrorName() string { return "OrderValidationError" }

// Error satisfies the builtin error interface
func (e OrderValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrder.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrderValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrderValidationError{}

var _Order_Status_InLookup = map[string]struct{}{
	"PENDING":    {},
	"CONFIRMED":  {},
	"PROCESSING": {},
	"SHIPPED":    {},
	"DELIVERED":  {},
	"CANCELLED":  {},
	"REFUNDED":   {},
}
