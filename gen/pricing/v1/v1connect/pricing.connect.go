// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pricing/v1/pricing.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-examples/gen/pricing/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PricingServiceName is the fully-qualified name of the PricingService service.
	PricingServiceName = "pricing.PricingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PricingServiceCalculateDiscountProcedure is the fully-qualified name of the PricingService's
	// CalculateDiscount RPC.
	PricingServiceCalculateDiscountProcedure = "/pricing.PricingService/CalculateDiscount"
	// PricingServiceValidateCouponProcedure is the fully-qualified name of the PricingService's
	// ValidateCoupon RPC.
	PricingServiceValidateCouponProcedure = "/pricing.PricingService/ValidateCoupon"
	// PricingServiceGetCouponProcedure is the fully-qualified name of the PricingService's GetCoupon
	// RPC.
	PricingServiceGetCouponProcedure = "/pricing.PricingService/GetCoupon"
	// PricingServiceListCouponsProcedure is the fully-qualified name of the PricingService's
	// ListCoupons RPC.
	PricingServiceListCouponsProcedure = "/pricing.PricingService/ListCoupons"
	// PricingServiceCreateCouponProcedure is the fully-qualified name of the PricingService's
	// CreateCoupon RPC.
	PricingServiceCreateCouponProcedure = "/pricing.PricingService/CreateCoupon"
	// PricingServiceUpdateCouponProcedure is the fully-qualified name of the PricingService's
	// UpdateCoupon RPC.
	PricingServiceUpdateCouponProcedure = "/pricing.PricingService/UpdateCoupon"
	// PricingServiceDeleteCouponProcedure is the fully-qualified name of the PricingService's
	// DeleteCoupon RPC.
	PricingServiceDeleteCouponProcedure = "/pricing.PricingService/DeleteCoupon"
)

// PricingServiceClient is a client for the pricing.PricingService service.
type PricingServiceClient interface {
	CalculateDiscount(context.Context, *connect.Request[v1.CalculateDiscountRequest]) (*connect.Response[v1.CalculateDiscountResponse], error)
	ValidateCoupon(context.Context, *connect.Request[v1.ValidateCouponRequest]) (*connect.Response[v1.ValidateCouponResponse], error)
	GetCoupon(context.Context, *connect.Request[v1.GetCouponRequest]) (*connect.Response[v1.GetCouponResponse], error)
	ListCoupons(context.Context, *connect.Request[v1.ListCouponsRequest]) (*connect.Response[v1.ListCouponsResponse], error)
	CreateCoupon(context.Context, *connect.Request[v1.CreateCouponRequest]) (*connect.Response[v1.CreateCouponResponse], error)
	UpdateCoupon(context.Context, *connect.Request[v1.UpdateCouponRequest]) (*connect.Response[v1.UpdateCouponResponse], error)
	DeleteCoupon(context.Context, *connect.Request[v1.DeleteCouponRequest]) (*connect.Response[v1.DeleteCouponResponse], error)
}

// NewPricingServiceClient constructs a client for the pricing.PricingService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPricingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PricingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	pricingServiceMethods := v1.File_pricing_v1_pricing_proto.Services().ByName("PricingService").Methods()
	return &pricingServiceClient{
		calculateDiscount: connect.NewClient[v1.CalculateDiscountRequest, v1.CalculateDiscountResponse](
			httpClient,
			baseURL+PricingServiceCalculateDiscountProcedure,
			connect.WithSchema(pricingServiceMethods.ByName("CalculateDiscount")),
			connect.WithClientOptions(opts...),
		),
		validateCoupon: connect.NewClient[v1.ValidateCouponRequest, v1.ValidateCouponResponse](
			httpClient,
			baseURL+PricingServiceValidateCouponProcedure,
			connect.WithSchema(pricingServiceMethods.ByName("ValidateCoupon")),
			connect.WithClientOptions(opts...),
		),
		getCoupon: connect.NewClient[v1.GetCouponRequest, v1.GetCouponResponse](
			httpClient,
			baseURL+PricingServiceGetCouponProcedure,
			connect.WithSchema(pricingServiceMethods.ByName("GetCoupon")),
			connect.WithClientOptions(opts...),
		),
		listCoupons: connect.NewClient[v1.ListCouponsRequest, v1.ListCouponsResponse](
			httpClient,
			baseURL+PricingServiceListCouponsProcedure,
			connect.WithSchema(pricingServiceMethods.ByName("ListCoupons")),
			connect.WithClientOptions(opts...),
		),
		createCoupon: connect.NewClient[v1.CreateCouponRequest, v1.CreateCouponResponse](
			httpClient,
			baseURL+PricingServiceCreateCouponProcedure,
			connect.WithSchema(pricingServiceMethods.ByName("CreateCoupon")),
			connect.WithClientOptions(opts...),
		),
		updateCoupon: connect.NewClient[v1.UpdateCouponRequest, v1.UpdateCouponResponse](
			httpClient,
			baseURL+PricingServiceUpdateCouponProcedure,
			connect.WithSchema(pricingServiceMethods.ByName("UpdateCoupon")),
			connect.WithClientOptions(opts...),
		),
		deleteCoupon: connect.NewClient[v1.DeleteCouponRequest, v1.DeleteCouponResponse](
			httpClient,
			baseURL+PricingServiceDeleteCouponProcedure,
			connect.WithSchema(pricingServiceMethods.ByName("DeleteCoupon")),
			connect.WithClientOptions(opts...),
		),
	}
}

// pricingServiceClient implements PricingServiceClient.
type pricingServiceClient struct {
	calculateDiscount *connect.Client[v1.CalculateDiscountRequest, v1.CalculateDiscountResponse]
	validateCoupon    *connect.Client[v1.ValidateCouponRequest, v1.ValidateCouponResponse]
	getCoupon         *connect.Client[v1.GetCouponRequest, v1.GetCouponResponse]
	listCoupons       *connect.Client[v1.ListCouponsRequest, v1.ListCouponsResponse]
	createCoupon      *connect.Client[v1.CreateCouponRequest, v1.CreateCouponResponse]
	updateCoupon      *connect.Client[v1.UpdateCouponRequest, v1.UpdateCouponResponse]
	deleteCoupon      *connect.Client[v1.DeleteCouponRequest, v1.DeleteCouponResponse]
}

// CalculateDiscount calls pricing.PricingService.CalculateDiscount.
func (c *pricingServiceClient) CalculateDiscount(ctx context.Context, req *connect.Request[v1.CalculateDiscountRequest]) (*connect.Response[v1.CalculateDiscountResponse], error) {
	return c.calculateDiscount.CallUnary(ctx, req)
}

// ValidateCoupon calls pricing.PricingService.ValidateCoupon.
func (c *pricingServiceClient) ValidateCoupon(ctx context.Context, req *connect.Request[v1.ValidateCouponRequest]) (*connect.Response[v1.ValidateCouponResponse], error) {
	return c.validateCoupon.CallUnary(ctx, req)
}

// GetCoupon calls pricing.PricingService.GetCoupon.
func (c *pricingServiceClient) GetCoupon(ctx context.Context, req *connect.Request[v1.GetCouponRequest]) (*connect.Response[v1.GetCouponResponse], error) {
	return c.getCoupon.CallUnary(ctx, req)
}

// ListCoupons calls pricing.PricingService.ListCoupons.
func (c *pricingServiceClient) ListCoupons(ctx context.Context, req *connect.Request[v1.ListCouponsRequest]) (*connect.Response[v1.ListCouponsResponse], error) {
	return c.listCoupons.CallUnary(ctx, req)
}

// CreateCoupon calls pricing.PricingService.CreateCoupon.
func (c *pricingServiceClient) CreateCoupon(ctx context.Context, req *connect.Request[v1.CreateCouponRequest]) (*connect.Response[v1.CreateCouponResponse], error) {
	return c.createCoupon.CallUnary(ctx, req)
}

// UpdateCoupon calls pricing.PricingService.UpdateCoupon.
func (c *pricingServiceClient) UpdateCoupon(ctx context.Context, req *connect.Request[v1.UpdateCouponRequest]) (*connect.Response[v1.UpdateCouponResponse], error) {
	return c.updateCoupon.CallUnary(ctx, req)
}

// DeleteCoupon calls pricing.PricingService.DeleteCoupon.
func (c *pricingServiceClient) DeleteCoupon(ctx context.Context, req *connect.Request[v1.DeleteCouponRequest]) (*connect.Response[v1.DeleteCouponResponse], error) {
	return c.deleteCoupon.CallUnary(ctx, req)
}

// PricingServiceHandler is an implementation of the pricing.PricingService service.
type PricingServiceHandler interface {
	CalculateDiscount(context.Context, *connect.Request[v1.CalculateDiscountRequest]) (*connect.Response[v1.CalculateDiscountResponse], error)
	ValidateCoupon(context.Context, *connect.Request[v1.ValidateCouponRequest]) (*connect.Response[v1.ValidateCouponResponse], error)
	GetCoupon(context.Context, *connect.Request[v1.GetCouponRequest]) (*connect.Response[v1.GetCouponResponse], error)
	ListCoupons(context.Context, *connect.Request[v1.ListCouponsRequest]) (*connect.Response[v1.ListCouponsResponse], error)
	CreateCoupon(context.Context, *connect.Request[v1.CreateCouponRequest]) (*connect.Response[v1.CreateCouponResponse], error)
	UpdateCoupon(context.Context, *connect.Request[v1.UpdateCouponRequest]) (*connect.Response[v1.UpdateCouponResponse], error)
	DeleteCoupon(context.Context, *connect.Request[v1.DeleteCouponRequest]) (*connect.Response[v1.DeleteCouponResponse], error)
}

// NewPricingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPricingServiceHandler(svc PricingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pricingServiceMethods := v1.File_pricing_v1_pricing_proto.Services().ByName("PricingService").Methods()
	pricingServiceCalculateDiscountHandler := connect.NewUnaryHandler(
		PricingServiceCalculateDiscountProcedure,
		svc.CalculateDiscount,
		connect.WithSchema(pricingServiceMethods.ByName("CalculateDiscount")),
		connect.WithHandlerOptions(opts...),
	)
	pricingServiceValidateCouponHandler := connect.NewUnaryHandler(
		PricingServiceValidateCouponProcedure,
		svc.ValidateCoupon,
		connect.WithSchema(pricingServiceMethods.ByName("ValidateCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	pricingServiceGetCouponHandler := connect.NewUnaryHandler(
		PricingServiceGetCouponProcedure,
		svc.GetCoupon,
		connect.WithSchema(pricingServiceMethods.ByName("GetCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	pricingServiceListCouponsHandler := connect.NewUnaryHandler(
		PricingServiceListCouponsProcedure,
		svc.ListCoupons,
		connect.WithSchema(pricingServiceMethods.ByName("ListCoupons")),
		connect.WithHandlerOptions(opts...),
	)
	pricingServiceCreateCouponHandler := connect.NewUnaryHandler(
		PricingServiceCreateCouponProcedure,
		svc.CreateCoupon,
		connect.WithSchema(pricingServiceMethods.ByName("CreateCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	pricingServiceUpdateCouponHandler := connect.NewUnaryHandler(
		PricingServiceUpdateCouponProcedure,
		svc.UpdateCoupon,
		connect.WithSchema(pricingServiceMethods.ByName("UpdateCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	pricingServiceDeleteCouponHandler := connect.NewUnaryHandler(
		PricingServiceDeleteCouponProcedure,
		svc.DeleteCoupon,
		connect.WithSchema(pricingServiceMethods.ByName("DeleteCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	return "/pricing.PricingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PricingServiceCalculateDiscountProcedure:
			pricingServiceCalculateDiscountHandler.ServeHTTP(w, r)
		case PricingServiceValidateCouponProcedure:
			pricingServiceValidateCouponHandler.ServeHTTP(w, r)
		case PricingServiceGetCouponProcedure:
			pricingServiceGetCouponHandler.ServeHTTP(w, r)
		case PricingServiceListCouponsProcedure:
			pricingServiceListCouponsHandler.ServeHTTP(w, r)
		case PricingServiceCreateCouponProcedure:
			pricingServiceCreateCouponHandler.ServeHTTP(w, r)
		case PricingServiceUpdateCouponProcedure:
			pricingServiceUpdateCouponHandler.ServeHTTP(w, r)
		case PricingServiceDeleteCouponProcedure:
			pricingServiceDeleteCouponHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPricingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPricingServiceHandler struct{}

func (UnimplementedPricingServiceHandler) CalculateDiscount(context.Context, *connect.Request[v1.CalculateDiscountRequest]) (*connect.Response[v1.CalculateDiscountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pricing.PricingService.CalculateDiscount is not implemented"))
}

func (UnimplementedPricingServiceHandler) ValidateCoupon(context.Context, *connect.Request[v1.ValidateCouponRequest]) (*connect.Response[v1.ValidateCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pricing.PricingService.ValidateCoupon is not implemented"))
}

func (UnimplementedPricingServiceHandler) GetCoupon(context.Context, *connect.Request[v1.GetCouponRequest]) (*connect.Response[v1.GetCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pricing.PricingService.GetCoupon is not implemented"))
}

func (UnimplementedPricingServiceHandler) ListCoupons(context.Context, *connect.Request[v1.ListCouponsRequest]) (*connect.Response[v1.ListCouponsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pricing.PricingService.ListCoupons is not implemented"))
}

func (UnimplementedPricingServiceHandler) CreateCoupon(context.Context, *connect.Request[v1.CreateCouponRequest]) (*connect.Response[v1.CreateCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pricing.PricingService.CreateCoupon is not implemented"))
}

func (UnimplementedPricingServiceHandler) UpdateCoupon(context.Context, *connect.Request[v1.UpdateCouponRequest]) (*connect.Response[v1.UpdateCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pricing.PricingService.UpdateCoupon is not implemented"))
}

func (UnimplementedPricingServiceHandler) DeleteCoupon(context.Context, *connect.Request[v1.DeleteCouponRequest]) (*connect.Response[v1.DeleteCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pricing.PricingService.DeleteCoupon is not implemented"))
}
