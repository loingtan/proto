// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: pricing/v1/pricing.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "gitlab.zalopay.vn/loint6/go-proto/gen/pricing/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PricingServiceName is the fully-qualified name of the PricingService service.
	PricingServiceName = "pricing.PricingService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PricingServiceCalculateDiscountProcedure is the fully-qualified name of the PricingService's
	// CalculateDiscount RPC.
	PricingServiceCalculateDiscountProcedure = "/pricing.PricingService/CalculateDiscount"
	// PricingServiceValidateCouponProcedure is the fully-qualified name of the PricingService's
	// ValidateCoupon RPC.
	PricingServiceValidateCouponProcedure = "/pricing.PricingService/ValidateCoupon"
)

// PricingServiceClient is a client for the pricing.PricingService service.
type PricingServiceClient interface {
	CalculateDiscount(context.Context, *connect.Request[v1.CalculateDiscountRequest]) (*connect.Response[v1.CalculateDiscountResponse], error)
	ValidateCoupon(context.Context, *connect.Request[v1.ValidateCouponRequest]) (*connect.Response[v1.ValidateCouponResponse], error)
}

// NewPricingServiceClient constructs a client for the pricing.PricingService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPricingServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PricingServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	pricingServiceMethods := v1.File_pricing_v1_pricing_proto.Services().ByName("PricingService").Methods()
	return &pricingServiceClient{
		calculateDiscount: connect.NewClient[v1.CalculateDiscountRequest, v1.CalculateDiscountResponse](
			httpClient,
			baseURL+PricingServiceCalculateDiscountProcedure,
			connect.WithSchema(pricingServiceMethods.ByName("CalculateDiscount")),
			connect.WithClientOptions(opts...),
		),
		validateCoupon: connect.NewClient[v1.ValidateCouponRequest, v1.ValidateCouponResponse](
			httpClient,
			baseURL+PricingServiceValidateCouponProcedure,
			connect.WithSchema(pricingServiceMethods.ByName("ValidateCoupon")),
			connect.WithClientOptions(opts...),
		),
	}
}

// pricingServiceClient implements PricingServiceClient.
type pricingServiceClient struct {
	calculateDiscount *connect.Client[v1.CalculateDiscountRequest, v1.CalculateDiscountResponse]
	validateCoupon    *connect.Client[v1.ValidateCouponRequest, v1.ValidateCouponResponse]
}

// CalculateDiscount calls pricing.PricingService.CalculateDiscount.
func (c *pricingServiceClient) CalculateDiscount(ctx context.Context, req *connect.Request[v1.CalculateDiscountRequest]) (*connect.Response[v1.CalculateDiscountResponse], error) {
	return c.calculateDiscount.CallUnary(ctx, req)
}

// ValidateCoupon calls pricing.PricingService.ValidateCoupon.
func (c *pricingServiceClient) ValidateCoupon(ctx context.Context, req *connect.Request[v1.ValidateCouponRequest]) (*connect.Response[v1.ValidateCouponResponse], error) {
	return c.validateCoupon.CallUnary(ctx, req)
}

// PricingServiceHandler is an implementation of the pricing.PricingService service.
type PricingServiceHandler interface {
	CalculateDiscount(context.Context, *connect.Request[v1.CalculateDiscountRequest]) (*connect.Response[v1.CalculateDiscountResponse], error)
	ValidateCoupon(context.Context, *connect.Request[v1.ValidateCouponRequest]) (*connect.Response[v1.ValidateCouponResponse], error)
}

// NewPricingServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPricingServiceHandler(svc PricingServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pricingServiceMethods := v1.File_pricing_v1_pricing_proto.Services().ByName("PricingService").Methods()
	pricingServiceCalculateDiscountHandler := connect.NewUnaryHandler(
		PricingServiceCalculateDiscountProcedure,
		svc.CalculateDiscount,
		connect.WithSchema(pricingServiceMethods.ByName("CalculateDiscount")),
		connect.WithHandlerOptions(opts...),
	)
	pricingServiceValidateCouponHandler := connect.NewUnaryHandler(
		PricingServiceValidateCouponProcedure,
		svc.ValidateCoupon,
		connect.WithSchema(pricingServiceMethods.ByName("ValidateCoupon")),
		connect.WithHandlerOptions(opts...),
	)
	return "/pricing.PricingService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PricingServiceCalculateDiscountProcedure:
			pricingServiceCalculateDiscountHandler.ServeHTTP(w, r)
		case PricingServiceValidateCouponProcedure:
			pricingServiceValidateCouponHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPricingServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPricingServiceHandler struct{}

func (UnimplementedPricingServiceHandler) CalculateDiscount(context.Context, *connect.Request[v1.CalculateDiscountRequest]) (*connect.Response[v1.CalculateDiscountResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pricing.PricingService.CalculateDiscount is not implemented"))
}

func (UnimplementedPricingServiceHandler) ValidateCoupon(context.Context, *connect.Request[v1.ValidateCouponRequest]) (*connect.Response[v1.ValidateCouponResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("pricing.PricingService.ValidateCoupon is not implemented"))
}
