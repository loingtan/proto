// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: standard/error.proto

package standard

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Error) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Error with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ErrorMultiError, or nil if none found.
func (m *Error) ValidateAll() error {
	return m.validate(true)
}

func (m *Error) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	for idx, item := range m.GetDetails() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ErrorValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ErrorValidationError{
						field:  fmt.Sprintf("Details[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ErrorValidationError{
					field:  fmt.Sprintf("Details[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for RequestId

	// no validation rules for Timestamp

	if len(errors) > 0 {
		return ErrorMultiError(errors)
	}

	return nil
}

// ErrorMultiError is an error wrapping multiple validation errors returned by
// Error.ValidateAll() if the designated constraints aren't met.
type ErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorMultiError) AllErrors() []error { return m }

// ErrorValidationError is the validation error returned by Error.Validate if
// the designated constraints aren't met.
type ErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorValidationError) ErrorName() string { return "ErrorValidationError" }

// Error satisfies the builtin error interface
func (e ErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorValidationError{}

// Validate checks the field values on ErrorDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ErrorDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ErrorDetail with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ErrorDetailMultiError, or
// nil if none found.
func (m *ErrorDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *ErrorDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ErrorDetailValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ErrorDetailValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ErrorDetailValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ErrorDetailMultiError(errors)
	}

	return nil
}

// ErrorDetailMultiError is an error wrapping multiple validation errors
// returned by ErrorDetail.ValidateAll() if the designated constraints aren't met.
type ErrorDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ErrorDetailMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ErrorDetailMultiError) AllErrors() []error { return m }

// ErrorDetailValidationError is the validation error returned by
// ErrorDetail.Validate if the designated constraints aren't met.
type ErrorDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ErrorDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ErrorDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ErrorDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ErrorDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ErrorDetailValidationError) ErrorName() string { return "ErrorDetailValidationError" }

// Error satisfies the builtin error interface
func (e ErrorDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sErrorDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ErrorDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ErrorDetailValidationError{}

// Validate checks the field values on FieldViolation with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FieldViolation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FieldViolation with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FieldViolationMultiError,
// or nil if none found.
func (m *FieldViolation) ValidateAll() error {
	return m.validate(true)
}

func (m *FieldViolation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Field

	// no validation rules for Description

	if len(errors) > 0 {
		return FieldViolationMultiError(errors)
	}

	return nil
}

// FieldViolationMultiError is an error wrapping multiple validation errors
// returned by FieldViolation.ValidateAll() if the designated constraints
// aren't met.
type FieldViolationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FieldViolationMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FieldViolationMultiError) AllErrors() []error { return m }

// FieldViolationValidationError is the validation error returned by
// FieldViolation.Validate if the designated constraints aren't met.
type FieldViolationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FieldViolationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FieldViolationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FieldViolationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FieldViolationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FieldViolationValidationError) ErrorName() string { return "FieldViolationValidationError" }

// Error satisfies the builtin error interface
func (e FieldViolationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFieldViolation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FieldViolationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FieldViolationValidationError{}

// Validate checks the field values on ResourceInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ResourceInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ResourceInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceInfoMultiError, or
// nil if none found.
func (m *ResourceInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ResourceInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ResourceType

	// no validation rules for ResourceId

	// no validation rules for Owner

	if len(errors) > 0 {
		return ResourceInfoMultiError(errors)
	}

	return nil
}

// ResourceInfoMultiError is an error wrapping multiple validation errors
// returned by ResourceInfo.ValidateAll() if the designated constraints aren't met.
type ResourceInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceInfoMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceInfoMultiError) AllErrors() []error { return m }

// ResourceInfoValidationError is the validation error returned by
// ResourceInfo.Validate if the designated constraints aren't met.
type ResourceInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceInfoValidationError) ErrorName() string { return "ResourceInfoValidationError" }

// Error satisfies the builtin error interface
func (e ResourceInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResourceInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceInfoValidationError{}

// Validate checks the field values on StandardResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StandardResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StandardResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StandardResponseMultiError, or nil if none found.
func (m *StandardResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StandardResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Success

	if all {
		switch v := interface{}(m.GetError()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StandardResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StandardResponseValidationError{
					field:  "Error",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetError()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StandardResponseValidationError{
				field:  "Error",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StandardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StandardResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StandardResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StandardResponseMultiError(errors)
	}

	return nil
}

// StandardResponseMultiError is an error wrapping multiple validation errors
// returned by StandardResponse.ValidateAll() if the designated constraints
// aren't met.
type StandardResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StandardResponseMultiError) Error() string {
	msgs := make([]string, 0, len(m))
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StandardResponseMultiError) AllErrors() []error { return m }

// StandardResponseValidationError is the validation error returned by
// StandardResponse.Validate if the designated constraints aren't met.
type StandardResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StandardResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StandardResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StandardResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StandardResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StandardResponseValidationError) ErrorName() string { return "StandardResponseValidationError" }

// Error satisfies the builtin error interface
func (e StandardResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStandardResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StandardResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StandardResponseValidationError{}
