// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: transaction/v1/transaction.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/bufbuild/buf-examples/gen/transaction/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// TransactionServiceName is the fully-qualified name of the TransactionService service.
	TransactionServiceName = "transaction.TransactionService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TransactionServiceCreateTransactionProcedure is the fully-qualified name of the
	// TransactionService's CreateTransaction RPC.
	TransactionServiceCreateTransactionProcedure = "/transaction.TransactionService/CreateTransaction"
	// TransactionServiceGetTransactionProcedure is the fully-qualified name of the TransactionService's
	// GetTransaction RPC.
	TransactionServiceGetTransactionProcedure = "/transaction.TransactionService/GetTransaction"
	// TransactionServiceListTransactionsProcedure is the fully-qualified name of the
	// TransactionService's ListTransactions RPC.
	TransactionServiceListTransactionsProcedure = "/transaction.TransactionService/ListTransactions"
	// TransactionServiceUpdateTransactionStatusProcedure is the fully-qualified name of the
	// TransactionService's UpdateTransactionStatus RPC.
	TransactionServiceUpdateTransactionStatusProcedure = "/transaction.TransactionService/UpdateTransactionStatus"
	// TransactionServiceGetUserTransactionsProcedure is the fully-qualified name of the
	// TransactionService's GetUserTransactions RPC.
	TransactionServiceGetUserTransactionsProcedure = "/transaction.TransactionService/GetUserTransactions"
	// TransactionServiceGetCouponTransactionsProcedure is the fully-qualified name of the
	// TransactionService's GetCouponTransactions RPC.
	TransactionServiceGetCouponTransactionsProcedure = "/transaction.TransactionService/GetCouponTransactions"
)

// TransactionServiceClient is a client for the transaction.TransactionService service.
type TransactionServiceClient interface {
	CreateTransaction(context.Context, *connect.Request[v1.CreateTransactionRequest]) (*connect.Response[v1.CreateTransactionResponse], error)
	GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error)
	ListTransactions(context.Context, *connect.Request[v1.ListTransactionsRequest]) (*connect.Response[v1.ListTransactionsResponse], error)
	UpdateTransactionStatus(context.Context, *connect.Request[v1.UpdateTransactionStatusRequest]) (*connect.Response[v1.UpdateTransactionStatusResponse], error)
	GetUserTransactions(context.Context, *connect.Request[v1.GetUserTransactionsRequest]) (*connect.Response[v1.GetUserTransactionsResponse], error)
	GetCouponTransactions(context.Context, *connect.Request[v1.GetCouponTransactionsRequest]) (*connect.Response[v1.GetCouponTransactionsResponse], error)
}

// NewTransactionServiceClient constructs a client for the transaction.TransactionService service.
// By default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped
// responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTransactionServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TransactionServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	transactionServiceMethods := v1.File_transaction_v1_transaction_proto.Services().ByName("TransactionService").Methods()
	return &transactionServiceClient{
		createTransaction: connect.NewClient[v1.CreateTransactionRequest, v1.CreateTransactionResponse](
			httpClient,
			baseURL+TransactionServiceCreateTransactionProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("CreateTransaction")),
			connect.WithClientOptions(opts...),
		),
		getTransaction: connect.NewClient[v1.GetTransactionRequest, v1.GetTransactionResponse](
			httpClient,
			baseURL+TransactionServiceGetTransactionProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("GetTransaction")),
			connect.WithClientOptions(opts...),
		),
		listTransactions: connect.NewClient[v1.ListTransactionsRequest, v1.ListTransactionsResponse](
			httpClient,
			baseURL+TransactionServiceListTransactionsProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("ListTransactions")),
			connect.WithClientOptions(opts...),
		),
		updateTransactionStatus: connect.NewClient[v1.UpdateTransactionStatusRequest, v1.UpdateTransactionStatusResponse](
			httpClient,
			baseURL+TransactionServiceUpdateTransactionStatusProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("UpdateTransactionStatus")),
			connect.WithClientOptions(opts...),
		),
		getUserTransactions: connect.NewClient[v1.GetUserTransactionsRequest, v1.GetUserTransactionsResponse](
			httpClient,
			baseURL+TransactionServiceGetUserTransactionsProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("GetUserTransactions")),
			connect.WithClientOptions(opts...),
		),
		getCouponTransactions: connect.NewClient[v1.GetCouponTransactionsRequest, v1.GetCouponTransactionsResponse](
			httpClient,
			baseURL+TransactionServiceGetCouponTransactionsProcedure,
			connect.WithSchema(transactionServiceMethods.ByName("GetCouponTransactions")),
			connect.WithClientOptions(opts...),
		),
	}
}

// transactionServiceClient implements TransactionServiceClient.
type transactionServiceClient struct {
	createTransaction       *connect.Client[v1.CreateTransactionRequest, v1.CreateTransactionResponse]
	getTransaction          *connect.Client[v1.GetTransactionRequest, v1.GetTransactionResponse]
	listTransactions        *connect.Client[v1.ListTransactionsRequest, v1.ListTransactionsResponse]
	updateTransactionStatus *connect.Client[v1.UpdateTransactionStatusRequest, v1.UpdateTransactionStatusResponse]
	getUserTransactions     *connect.Client[v1.GetUserTransactionsRequest, v1.GetUserTransactionsResponse]
	getCouponTransactions   *connect.Client[v1.GetCouponTransactionsRequest, v1.GetCouponTransactionsResponse]
}

// CreateTransaction calls transaction.TransactionService.CreateTransaction.
func (c *transactionServiceClient) CreateTransaction(ctx context.Context, req *connect.Request[v1.CreateTransactionRequest]) (*connect.Response[v1.CreateTransactionResponse], error) {
	return c.createTransaction.CallUnary(ctx, req)
}

// GetTransaction calls transaction.TransactionService.GetTransaction.
func (c *transactionServiceClient) GetTransaction(ctx context.Context, req *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error) {
	return c.getTransaction.CallUnary(ctx, req)
}

// ListTransactions calls transaction.TransactionService.ListTransactions.
func (c *transactionServiceClient) ListTransactions(ctx context.Context, req *connect.Request[v1.ListTransactionsRequest]) (*connect.Response[v1.ListTransactionsResponse], error) {
	return c.listTransactions.CallUnary(ctx, req)
}

// UpdateTransactionStatus calls transaction.TransactionService.UpdateTransactionStatus.
func (c *transactionServiceClient) UpdateTransactionStatus(ctx context.Context, req *connect.Request[v1.UpdateTransactionStatusRequest]) (*connect.Response[v1.UpdateTransactionStatusResponse], error) {
	return c.updateTransactionStatus.CallUnary(ctx, req)
}

// GetUserTransactions calls transaction.TransactionService.GetUserTransactions.
func (c *transactionServiceClient) GetUserTransactions(ctx context.Context, req *connect.Request[v1.GetUserTransactionsRequest]) (*connect.Response[v1.GetUserTransactionsResponse], error) {
	return c.getUserTransactions.CallUnary(ctx, req)
}

// GetCouponTransactions calls transaction.TransactionService.GetCouponTransactions.
func (c *transactionServiceClient) GetCouponTransactions(ctx context.Context, req *connect.Request[v1.GetCouponTransactionsRequest]) (*connect.Response[v1.GetCouponTransactionsResponse], error) {
	return c.getCouponTransactions.CallUnary(ctx, req)
}

// TransactionServiceHandler is an implementation of the transaction.TransactionService service.
type TransactionServiceHandler interface {
	CreateTransaction(context.Context, *connect.Request[v1.CreateTransactionRequest]) (*connect.Response[v1.CreateTransactionResponse], error)
	GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error)
	ListTransactions(context.Context, *connect.Request[v1.ListTransactionsRequest]) (*connect.Response[v1.ListTransactionsResponse], error)
	UpdateTransactionStatus(context.Context, *connect.Request[v1.UpdateTransactionStatusRequest]) (*connect.Response[v1.UpdateTransactionStatusResponse], error)
	GetUserTransactions(context.Context, *connect.Request[v1.GetUserTransactionsRequest]) (*connect.Response[v1.GetUserTransactionsResponse], error)
	GetCouponTransactions(context.Context, *connect.Request[v1.GetCouponTransactionsRequest]) (*connect.Response[v1.GetCouponTransactionsResponse], error)
}

// NewTransactionServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTransactionServiceHandler(svc TransactionServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	transactionServiceMethods := v1.File_transaction_v1_transaction_proto.Services().ByName("TransactionService").Methods()
	transactionServiceCreateTransactionHandler := connect.NewUnaryHandler(
		TransactionServiceCreateTransactionProcedure,
		svc.CreateTransaction,
		connect.WithSchema(transactionServiceMethods.ByName("CreateTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceGetTransactionHandler := connect.NewUnaryHandler(
		TransactionServiceGetTransactionProcedure,
		svc.GetTransaction,
		connect.WithSchema(transactionServiceMethods.ByName("GetTransaction")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceListTransactionsHandler := connect.NewUnaryHandler(
		TransactionServiceListTransactionsProcedure,
		svc.ListTransactions,
		connect.WithSchema(transactionServiceMethods.ByName("ListTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceUpdateTransactionStatusHandler := connect.NewUnaryHandler(
		TransactionServiceUpdateTransactionStatusProcedure,
		svc.UpdateTransactionStatus,
		connect.WithSchema(transactionServiceMethods.ByName("UpdateTransactionStatus")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceGetUserTransactionsHandler := connect.NewUnaryHandler(
		TransactionServiceGetUserTransactionsProcedure,
		svc.GetUserTransactions,
		connect.WithSchema(transactionServiceMethods.ByName("GetUserTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	transactionServiceGetCouponTransactionsHandler := connect.NewUnaryHandler(
		TransactionServiceGetCouponTransactionsProcedure,
		svc.GetCouponTransactions,
		connect.WithSchema(transactionServiceMethods.ByName("GetCouponTransactions")),
		connect.WithHandlerOptions(opts...),
	)
	return "/transaction.TransactionService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TransactionServiceCreateTransactionProcedure:
			transactionServiceCreateTransactionHandler.ServeHTTP(w, r)
		case TransactionServiceGetTransactionProcedure:
			transactionServiceGetTransactionHandler.ServeHTTP(w, r)
		case TransactionServiceListTransactionsProcedure:
			transactionServiceListTransactionsHandler.ServeHTTP(w, r)
		case TransactionServiceUpdateTransactionStatusProcedure:
			transactionServiceUpdateTransactionStatusHandler.ServeHTTP(w, r)
		case TransactionServiceGetUserTransactionsProcedure:
			transactionServiceGetUserTransactionsHandler.ServeHTTP(w, r)
		case TransactionServiceGetCouponTransactionsProcedure:
			transactionServiceGetCouponTransactionsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTransactionServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTransactionServiceHandler struct{}

func (UnimplementedTransactionServiceHandler) CreateTransaction(context.Context, *connect.Request[v1.CreateTransactionRequest]) (*connect.Response[v1.CreateTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("transaction.TransactionService.CreateTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) GetTransaction(context.Context, *connect.Request[v1.GetTransactionRequest]) (*connect.Response[v1.GetTransactionResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("transaction.TransactionService.GetTransaction is not implemented"))
}

func (UnimplementedTransactionServiceHandler) ListTransactions(context.Context, *connect.Request[v1.ListTransactionsRequest]) (*connect.Response[v1.ListTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("transaction.TransactionService.ListTransactions is not implemented"))
}

func (UnimplementedTransactionServiceHandler) UpdateTransactionStatus(context.Context, *connect.Request[v1.UpdateTransactionStatusRequest]) (*connect.Response[v1.UpdateTransactionStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("transaction.TransactionService.UpdateTransactionStatus is not implemented"))
}

func (UnimplementedTransactionServiceHandler) GetUserTransactions(context.Context, *connect.Request[v1.GetUserTransactionsRequest]) (*connect.Response[v1.GetUserTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("transaction.TransactionService.GetUserTransactions is not implemented"))
}

func (UnimplementedTransactionServiceHandler) GetCouponTransactions(context.Context, *connect.Request[v1.GetCouponTransactionsRequest]) (*connect.Response[v1.GetCouponTransactionsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("transaction.TransactionService.GetCouponTransactions is not implemented"))
}
