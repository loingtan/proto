// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: user/v1/user_profile.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "gitlab.zalopay.vn/loint6/go-proto/gen/user/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// UserProfileServiceName is the fully-qualified name of the UserProfileService service.
	UserProfileServiceName = "user.UserProfileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// UserProfileServiceCreateUserProfileProcedure is the fully-qualified name of the
	// UserProfileService's CreateUserProfile RPC.
	UserProfileServiceCreateUserProfileProcedure = "/user.UserProfileService/CreateUserProfile"
	// UserProfileServiceUpdateUserProcedure is the fully-qualified name of the UserProfileService's
	// UpdateUser RPC.
	UserProfileServiceUpdateUserProcedure = "/user.UserProfileService/UpdateUser"
	// UserProfileServiceListUserProfilesProcedure is the fully-qualified name of the
	// UserProfileService's ListUserProfiles RPC.
	UserProfileServiceListUserProfilesProcedure = "/user.UserProfileService/ListUserProfiles"
	// UserProfileServiceGetUserProfileProcedure is the fully-qualified name of the UserProfileService's
	// GetUserProfile RPC.
	UserProfileServiceGetUserProfileProcedure = "/user.UserProfileService/GetUserProfile"
)

// UserProfileServiceClient is a client for the user.UserProfileService service.
type UserProfileServiceClient interface {
	CreateUserProfile(context.Context, *connect.Request[v1.CreateUserProfileRequest]) (*connect.Response[v1.CreateUserProfileResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserProfileRequest]) (*connect.Response[v1.UpdateUserProfileResponse], error)
	ListUserProfiles(context.Context, *connect.Request[v1.ListUserProfilesRequest]) (*connect.Response[v1.ListUserProfilesResponse], error)
	GetUserProfile(context.Context, *connect.Request[v1.GetUserProfileRequest]) (*connect.Response[v1.GetUserProfileResponse], error)
}

// NewUserProfileServiceClient constructs a client for the user.UserProfileService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUserProfileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) UserProfileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	userProfileServiceMethods := v1.File_user_v1_user_profile_proto.Services().ByName("UserProfileService").Methods()
	return &userProfileServiceClient{
		createUserProfile: connect.NewClient[v1.CreateUserProfileRequest, v1.CreateUserProfileResponse](
			httpClient,
			baseURL+UserProfileServiceCreateUserProfileProcedure,
			connect.WithSchema(userProfileServiceMethods.ByName("CreateUserProfile")),
			connect.WithClientOptions(opts...),
		),
		updateUser: connect.NewClient[v1.UpdateUserProfileRequest, v1.UpdateUserProfileResponse](
			httpClient,
			baseURL+UserProfileServiceUpdateUserProcedure,
			connect.WithSchema(userProfileServiceMethods.ByName("UpdateUser")),
			connect.WithClientOptions(opts...),
		),
		listUserProfiles: connect.NewClient[v1.ListUserProfilesRequest, v1.ListUserProfilesResponse](
			httpClient,
			baseURL+UserProfileServiceListUserProfilesProcedure,
			connect.WithSchema(userProfileServiceMethods.ByName("ListUserProfiles")),
			connect.WithClientOptions(opts...),
		),
		getUserProfile: connect.NewClient[v1.GetUserProfileRequest, v1.GetUserProfileResponse](
			httpClient,
			baseURL+UserProfileServiceGetUserProfileProcedure,
			connect.WithSchema(userProfileServiceMethods.ByName("GetUserProfile")),
			connect.WithClientOptions(opts...),
		),
	}
}

// userProfileServiceClient implements UserProfileServiceClient.
type userProfileServiceClient struct {
	createUserProfile *connect.Client[v1.CreateUserProfileRequest, v1.CreateUserProfileResponse]
	updateUser        *connect.Client[v1.UpdateUserProfileRequest, v1.UpdateUserProfileResponse]
	listUserProfiles  *connect.Client[v1.ListUserProfilesRequest, v1.ListUserProfilesResponse]
	getUserProfile    *connect.Client[v1.GetUserProfileRequest, v1.GetUserProfileResponse]
}

// CreateUserProfile calls user.UserProfileService.CreateUserProfile.
func (c *userProfileServiceClient) CreateUserProfile(ctx context.Context, req *connect.Request[v1.CreateUserProfileRequest]) (*connect.Response[v1.CreateUserProfileResponse], error) {
	return c.createUserProfile.CallUnary(ctx, req)
}

// UpdateUser calls user.UserProfileService.UpdateUser.
func (c *userProfileServiceClient) UpdateUser(ctx context.Context, req *connect.Request[v1.UpdateUserProfileRequest]) (*connect.Response[v1.UpdateUserProfileResponse], error) {
	return c.updateUser.CallUnary(ctx, req)
}

// ListUserProfiles calls user.UserProfileService.ListUserProfiles.
func (c *userProfileServiceClient) ListUserProfiles(ctx context.Context, req *connect.Request[v1.ListUserProfilesRequest]) (*connect.Response[v1.ListUserProfilesResponse], error) {
	return c.listUserProfiles.CallUnary(ctx, req)
}

// GetUserProfile calls user.UserProfileService.GetUserProfile.
func (c *userProfileServiceClient) GetUserProfile(ctx context.Context, req *connect.Request[v1.GetUserProfileRequest]) (*connect.Response[v1.GetUserProfileResponse], error) {
	return c.getUserProfile.CallUnary(ctx, req)
}

// UserProfileServiceHandler is an implementation of the user.UserProfileService service.
type UserProfileServiceHandler interface {
	CreateUserProfile(context.Context, *connect.Request[v1.CreateUserProfileRequest]) (*connect.Response[v1.CreateUserProfileResponse], error)
	UpdateUser(context.Context, *connect.Request[v1.UpdateUserProfileRequest]) (*connect.Response[v1.UpdateUserProfileResponse], error)
	ListUserProfiles(context.Context, *connect.Request[v1.ListUserProfilesRequest]) (*connect.Response[v1.ListUserProfilesResponse], error)
	GetUserProfile(context.Context, *connect.Request[v1.GetUserProfileRequest]) (*connect.Response[v1.GetUserProfileResponse], error)
}

// NewUserProfileServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUserProfileServiceHandler(svc UserProfileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	userProfileServiceMethods := v1.File_user_v1_user_profile_proto.Services().ByName("UserProfileService").Methods()
	userProfileServiceCreateUserProfileHandler := connect.NewUnaryHandler(
		UserProfileServiceCreateUserProfileProcedure,
		svc.CreateUserProfile,
		connect.WithSchema(userProfileServiceMethods.ByName("CreateUserProfile")),
		connect.WithHandlerOptions(opts...),
	)
	userProfileServiceUpdateUserHandler := connect.NewUnaryHandler(
		UserProfileServiceUpdateUserProcedure,
		svc.UpdateUser,
		connect.WithSchema(userProfileServiceMethods.ByName("UpdateUser")),
		connect.WithHandlerOptions(opts...),
	)
	userProfileServiceListUserProfilesHandler := connect.NewUnaryHandler(
		UserProfileServiceListUserProfilesProcedure,
		svc.ListUserProfiles,
		connect.WithSchema(userProfileServiceMethods.ByName("ListUserProfiles")),
		connect.WithHandlerOptions(opts...),
	)
	userProfileServiceGetUserProfileHandler := connect.NewUnaryHandler(
		UserProfileServiceGetUserProfileProcedure,
		svc.GetUserProfile,
		connect.WithSchema(userProfileServiceMethods.ByName("GetUserProfile")),
		connect.WithHandlerOptions(opts...),
	)
	return "/user.UserProfileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case UserProfileServiceCreateUserProfileProcedure:
			userProfileServiceCreateUserProfileHandler.ServeHTTP(w, r)
		case UserProfileServiceUpdateUserProcedure:
			userProfileServiceUpdateUserHandler.ServeHTTP(w, r)
		case UserProfileServiceListUserProfilesProcedure:
			userProfileServiceListUserProfilesHandler.ServeHTTP(w, r)
		case UserProfileServiceGetUserProfileProcedure:
			userProfileServiceGetUserProfileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedUserProfileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUserProfileServiceHandler struct{}

func (UnimplementedUserProfileServiceHandler) CreateUserProfile(context.Context, *connect.Request[v1.CreateUserProfileRequest]) (*connect.Response[v1.CreateUserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.UserProfileService.CreateUserProfile is not implemented"))
}

func (UnimplementedUserProfileServiceHandler) UpdateUser(context.Context, *connect.Request[v1.UpdateUserProfileRequest]) (*connect.Response[v1.UpdateUserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.UserProfileService.UpdateUser is not implemented"))
}

func (UnimplementedUserProfileServiceHandler) ListUserProfiles(context.Context, *connect.Request[v1.ListUserProfilesRequest]) (*connect.Response[v1.ListUserProfilesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.UserProfileService.ListUserProfiles is not implemented"))
}

func (UnimplementedUserProfileServiceHandler) GetUserProfile(context.Context, *connect.Request[v1.GetUserProfileRequest]) (*connect.Response[v1.GetUserProfileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("user.UserProfileService.GetUserProfile is not implemented"))
}
